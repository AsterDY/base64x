// +build !noasm !appengine
// Code generated by asm2asm, DO NOT EDIT.

#include "go_asm.h"
#include "textflag.h"

TEXT Â·___asm2asm_compiled_code__DO_NOT_CALL_THIS_SYMBOL___(SB), NOSPLIT, $0
LCPI0_0:
	BYTE $0x01 // .byte 1
	BYTE $0x00 // .byte 0
	BYTE $0x02 // .byte 2
	BYTE $0x01 // .byte 1
	BYTE $0x04 // .byte 4
	BYTE $0x03 // .byte 3
	BYTE $0x05 // .byte 5
	BYTE $0x04 // .byte 4
	BYTE $0x07 // .byte 7
	BYTE $0x06 // .byte 6
	BYTE $0x08 // .byte 8
	BYTE $0x07 // .byte 7
	BYTE $0x0a // .byte 10
	BYTE $0x09 // .byte 9
	BYTE $0x0b // .byte 11
	BYTE $0x0a // .byte 10
	BYTE $0x01 // .byte 1
	BYTE $0x00 // .byte 0
	BYTE $0x02 // .byte 2
	BYTE $0x01 // .byte 1
	BYTE $0x04 // .byte 4
	BYTE $0x03 // .byte 3
	BYTE $0x05 // .byte 5
	BYTE $0x04 // .byte 4
	BYTE $0x07 // .byte 7
	BYTE $0x06 // .byte 6
	BYTE $0x08 // .byte 8
	BYTE $0x07 // .byte 7
	BYTE $0x0a // .byte 10
	BYTE $0x09 // .byte 9
	BYTE $0x0b // .byte 11
	BYTE $0x0a // .byte 10

LCPI0_1:
	WORD $0xfc00 // .word 64512
	WORD $0x0fc0 // .word 4032
	WORD $0xfc00 // .word 64512
	WORD $0x0fc0 // .word 4032
	WORD $0xfc00 // .word 64512
	WORD $0x0fc0 // .word 4032
	WORD $0xfc00 // .word 64512
	WORD $0x0fc0 // .word 4032
	WORD $0xfc00 // .word 64512
	WORD $0x0fc0 // .word 4032
	WORD $0xfc00 // .word 64512
	WORD $0x0fc0 // .word 4032
	WORD $0xfc00 // .word 64512
	WORD $0x0fc0 // .word 4032
	WORD $0xfc00 // .word 64512
	WORD $0x0fc0 // .word 4032

LCPI0_2:
	WORD $0x0040 // .word 64
	WORD $0x0400 // .word 1024
	WORD $0x0040 // .word 64
	WORD $0x0400 // .word 1024
	WORD $0x0040 // .word 64
	WORD $0x0400 // .word 1024
	WORD $0x0040 // .word 64
	WORD $0x0400 // .word 1024
	WORD $0x0040 // .word 64
	WORD $0x0400 // .word 1024
	WORD $0x0040 // .word 64
	WORD $0x0400 // .word 1024
	WORD $0x0040 // .word 64
	WORD $0x0400 // .word 1024
	WORD $0x0040 // .word 64
	WORD $0x0400 // .word 1024

LCPI0_3:
	WORD $0x03f0 // .word 1008
	WORD $0x003f // .word 63
	WORD $0x03f0 // .word 1008
	WORD $0x003f // .word 63
	WORD $0x03f0 // .word 1008
	WORD $0x003f // .word 63
	WORD $0x03f0 // .word 1008
	WORD $0x003f // .word 63
	WORD $0x03f0 // .word 1008
	WORD $0x003f // .word 63
	WORD $0x03f0 // .word 1008
	WORD $0x003f // .word 63
	WORD $0x03f0 // .word 1008
	WORD $0x003f // .word 63
	WORD $0x03f0 // .word 1008
	WORD $0x003f // .word 63

LCPI0_4:
	QUAD $0x1a1a1a1a1a1a1a1a; QUAD $0x1a1a1a1a1a1a1a1a // .space 16, '\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a'
	QUAD $0x1a1a1a1a1a1a1a1a; QUAD $0x1a1a1a1a1a1a1a1a // .space 16, '\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a'

LCPI0_5:
	QUAD $0x3333333333333333; QUAD $0x3333333333333333 // .space 16, '3333333333333333'
	QUAD $0x3333333333333333; QUAD $0x3333333333333333 // .space 16, '3333333333333333'

LCPI0_6:
	QUAD $0x0d0d0d0d0d0d0d0d; QUAD $0x0d0d0d0d0d0d0d0d // .space 16, '\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r'
	QUAD $0x0d0d0d0d0d0d0d0d; QUAD $0x0d0d0d0d0d0d0d0d // .space 16, '\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r'

_b64encode:
	BYTE  $0x55                                 // pushq        %rbp
	WORD  $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	WORD  $0x5741                               // pushq        %r15
	WORD  $0x5641                               // pushq        %r14
	WORD  $0x5441                               // pushq        %r12
	BYTE  $0x53                                 // pushq        %rbx
	MOVQ  8(SI), R9
	TESTQ R9, R9
	JE    LBB0_26
	MOVQ  0(DI), R8
	ADDQ  8(DI), R8
	MOVQ  0(SI), R12
	ADDQ  R12, R9
	TESTB $1, DX
	LONG  $0xe60d8d48; WORD $0x000e; BYTE $0x00 // leaq         $3814(%rip), %rcx  /* _VecEncodeCharsetStd(%rip) */
	LONG  $0x3f158d4c; WORD $0x000f; BYTE $0x00 // leaq         $3903(%rip), %r10  /* _VecEncodeCharsetURL(%rip) */
	LONG  $0xd1440f4c                           // cmoveq       %rcx, %r10
	LONG  $0x940d8d48; WORD $0x000e; BYTE $0x00 // leaq         $3732(%rip), %rcx  /* _TabEncodeCharsetStd(%rip) */
	LONG  $0xed1d8d4c; WORD $0x000e; BYTE $0x00 // leaq         $3821(%rip), %r11  /* _TabEncodeCharsetURL(%rip) */
	LONG  $0xd9440f4c                           // cmoveq       %rcx, %r11
	TESTB $4, DX
	JE    LBB0_2
	LEAQ  -28(R9), SI
	CMPQ  R12, SI
	JA    LBB0_4
	LONG  $0x6f7ec1c4; BYTE $0x02               // vmovdqu      (%r10), %ymm0
	QUAD  $0xfffffeb10d6ffec5                   // vmovdqu      $-335(%rip), %ymm1  /* LCPI0_0(%rip) */
	QUAD  $0xfffffec9156ffec5                   // vmovdqu      $-311(%rip), %ymm2  /* LCPI0_1(%rip) */
	QUAD  $0xfffffee11d6ffec5                   // vmovdqu      $-287(%rip), %ymm3  /* LCPI0_2(%rip) */
	QUAD  $0xfffffef9256ffec5                   // vmovdqu      $-263(%rip), %ymm4  /* LCPI0_3(%rip) */
	QUAD  $0xffffff112d6ffec5                   // vmovdqu      $-239(%rip), %ymm5  /* LCPI0_4(%rip) */
	QUAD  $0xffffff29356ffec5                   // vmovdqu      $-215(%rip), %ymm6  /* LCPI0_5(%rip) */
	QUAD  $0xffffff413d6ffec5                   // vmovdqu      $-191(%rip), %ymm7  /* LCPI0_6(%rip) */
	MOVQ  R8, R14

LBB0_6:
	LONG $0x6f7a41c4; WORD $0x2404 // vmovdqu      (%r12), %xmm8
	QUAD $0x010c2444383d43c4       // vinserti128  $1, $12(%r12), %ymm8, %ymm8
	LONG $0x003d62c4; BYTE $0xc1   // vpshufb      %ymm1, %ymm8, %ymm8
	LONG $0xcadb3dc5               // vpand        %ymm2, %ymm8, %ymm9
	LONG $0xcbe435c5               // vpmulhuw     %ymm3, %ymm9, %ymm9
	LONG $0xc4db3dc5               // vpand        %ymm4, %ymm8, %ymm8
	LONG $0x712dc1c4; WORD $0x08f0 // vpsllw       $8, %ymm8, %ymm10
	LONG $0x713dc1c4; WORD $0x04f0 // vpsllw       $4, %ymm8, %ymm8
	LONG $0x0e3d43c4; WORD $0xaac2 // vpblendw     $170, %ymm10, %ymm8, %ymm8
	LONG $0xeb3d41c4; BYTE $0xc1   // vpor         %ymm9, %ymm8, %ymm8
	LONG $0x645541c4; BYTE $0xc8   // vpcmpgtb     %ymm8, %ymm5, %ymm9
	LONG $0xcfdb35c5               // vpand        %ymm7, %ymm9, %ymm9
	LONG $0xd6d83dc5               // vpsubusb     %ymm6, %ymm8, %ymm10
	LONG $0xeb3541c4; BYTE $0xca   // vpor         %ymm10, %ymm9, %ymm9
	LONG $0x007d42c4; BYTE $0xc9   // vpshufb      %ymm9, %ymm0, %ymm9
	LONG $0xfc3541c4; BYTE $0xc0   // vpaddb       %ymm8, %ymm9, %ymm8
	LONG $0x7f7e41c4; BYTE $0x06   // vmovdqu      %ymm8, (%r14)
	ADDQ $32, R14
	ADDQ $24, R12
	CMPQ R12, SI
	JBE  LBB0_6
	JMP  LBB0_7

LBB0_2:
	MOVQ R8, R14

LBB0_7:
	LEAQ -24(R9), SI
	CMPQ R12, SI
	JA   LBB0_10

LBB0_8:
	MOVL DX, SI
	ANDL $4, SI
	JE   LBB0_10
	LONG $0x6f7ac1c4; WORD $0x2404             // vmovdqu      (%r12), %xmm0
	LONG $0x6f7ac1c4; WORD $0x244c; BYTE $0x08 // vmovdqu      $8(%r12), %xmm1
	LONG $0xd973f1c5; BYTE $0x04               // vpsrldq      $4, %xmm1, %xmm1
	LONG $0x387de3c4; WORD $0x01c1             // vinserti128  $1, %xmm1, %ymm0, %ymm0
	QUAD $0xfffddc05007de2c4; BYTE $0xff       // vpshufb      $-548(%rip), %ymm0, %ymm0  /* LCPI0_0(%rip) */
	QUAD $0xfffffdf40ddbfdc5                   // vpand        $-524(%rip), %ymm0, %ymm1  /* LCPI0_1(%rip) */
	QUAD $0xfffffe0c0de4f5c5                   // vpmulhuw     $-500(%rip), %ymm1, %ymm1  /* LCPI0_2(%rip) */
	QUAD $0xfffffe2405dbfdc5                   // vpand        $-476(%rip), %ymm0, %ymm0  /* LCPI0_3(%rip) */
	LONG $0xf071edc5; BYTE $0x08               // vpsllw       $8, %ymm0, %ymm2
	LONG $0xf071fdc5; BYTE $0x04               // vpsllw       $4, %ymm0, %ymm0
	LONG $0x0e7de3c4; WORD $0xaac2             // vpblendw     $170, %ymm2, %ymm0, %ymm0
	LONG $0xc1ebfdc5                           // vpor         %ymm1, %ymm0, %ymm0
	QUAD $0xfffffe280d6ffec5                   // vmovdqu      $-472(%rip), %ymm1  /* LCPI0_4(%rip) */
	LONG $0xc864f5c5                           // vpcmpgtb     %ymm0, %ymm1, %ymm1
	LONG $0x6f7ec1c4; BYTE $0x12               // vmovdqu      (%r10), %ymm2
	QUAD $0xfffffe371dd8fdc5                   // vpsubusb     $-457(%rip), %ymm0, %ymm3  /* LCPI0_5(%rip) */
	QUAD $0xfffffe4f0ddbf5c5                   // vpand        $-433(%rip), %ymm1, %ymm1  /* LCPI0_6(%rip) */
	LONG $0xcbebf5c5                           // vpor         %ymm3, %ymm1, %ymm1
	LONG $0x006de2c4; BYTE $0xc9               // vpshufb      %ymm1, %ymm2, %ymm1
	LONG $0xc0fcf5c5                           // vpaddb       %ymm0, %ymm1, %ymm0
	LONG $0x7f7ec1c4; BYTE $0x06               // vmovdqu      %ymm0, (%r14)
	ADDQ $32, R14
	ADDQ $24, R12

LBB0_10:
	CMPQ R12, R9
	JE   LBB0_25
	LEAQ -4(R9), R10
	CMPQ R12, R10
	JA   LBB0_14

LBB0_12:
	MOVL    0(R12), SI
	BSWAPL  SI
	MOVQ    SI, R15
	SHRQ    $26, R15
	MOVL    SI, CX
	SHRL    $20, CX
	ANDL    $63, CX
	MOVL    SI, BX
	SHRL    $14, BX
	ANDL    $63, BX
	SHRL    $8, SI
	ANDL    $63, SI
	ADDQ    $3, R12
	MOVBLZX 0(R11)(R15*1), AX
	MOVB    AX, 0(R14)
	MOVBLZX 0(R11)(CX*1), AX
	MOVB    AX, 1(R14)
	MOVBLZX 0(R11)(BX*1), AX
	MOVB    AX, 2(R14)
	MOVBLZX 0(R11)(SI*1), AX
	MOVB    AX, 3(R14)
	ADDQ    $4, R14
	CMPQ    R12, R10
	JBE     LBB0_12

LBB0_14:
	SUBQ    R12, R9
	MOVBLZX 0(R12), R10
	CMPQ    R9, $1
	JE      LBB0_21
	MOVQ    R10, SI
	SHLQ    $16, SI
	CMPQ    R9, $2
	JE      LBB0_18
	CMPQ    R9, $3
	JNE     LBB0_25
	MOVBLZX 2(R12), DX
	ORL     DX, SI
	MOVBLZX 1(R12), AX
	SHLL    $8, AX
	ORL     SI, AX
	SHRQ    $2, R10
	MOVB    0(R11)(R10*1), CX
	MOVB    CX, 0(R14)
	MOVL    AX, CX
	SHRL    $12, CX
	ANDL    $63, CX
	MOVB    0(R11)(CX*1), CX
	MOVB    CX, 1(R14)
	SHRL    $6, AX
	ANDL    $63, AX
	MOVB    0(R11)(AX*1), AX
	MOVB    AX, 2(R14)
	ANDL    $63, DX
	MOVB    0(R11)(DX*1), AX
	MOVB    AX, 3(R14)
	JMP     LBB0_24

LBB0_4:
	MOVQ R8, R14
	LEAQ -24(R9), SI
	CMPQ R12, SI
	JBE  LBB0_8
	JMP  LBB0_10

LBB0_18:
	MOVBLZX 1(R12), AX
	MOVL    AX, CX
	SHLL    $8, CX
	ORL     SI, CX
	SHRQ    $2, R10
	MOVB    0(R11)(R10*1), BX
	MOVB    BX, 0(R14)
	SHRL    $12, CX
	ANDL    $63, CX
	MOVB    0(R11)(CX*1), CX
	MOVB    CX, 1(R14)
	ANDL    $15, AX
	MOVB    0(R11)(AX*4), AX
	MOVB    AX, 2(R14)
	TESTB   $2, DX
	JNE     LBB0_19
	MOVB    $61, 3(R14)
	JMP     LBB0_24

LBB0_21:
	MOVQ  R10, AX
	SHRQ  $2, AX
	MOVB  0(R11)(AX*1), AX
	MOVB  AX, 0(R14)
	SHLL  $4, R10
	ANDL  $48, R10
	MOVB  0(R11)(R10*1), AX
	MOVB  AX, 1(R14)
	TESTB $2, DX
	JNE   LBB0_22
	MOVW  $15677, 2(R14)

LBB0_24:
	ADDQ $4, R14
	JMP  LBB0_25

LBB0_19:
	ADDQ $3, R14
	JMP  LBB0_25

LBB0_22:
	ADDQ $2, R14

LBB0_25:
	SUBQ R8, R14
	ADDQ R14, 8(DI)

LBB0_26:
	BYTE $0x5b               // popq         %rbx
	WORD $0x5c41             // popq         %r12
	WORD $0x5e41             // popq         %r14
	WORD $0x5f41             // popq         %r15
	BYTE $0x5d               // popq         %rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	RET

LCPI1_0:
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x13 // .byte 19
	BYTE $0x04 // .byte 4
	BYTE $0xbf // .byte 191
	BYTE $0xbf // .byte 191
	BYTE $0xb9 // .byte 185
	BYTE $0xb9 // .byte 185
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x13 // .byte 19
	BYTE $0x04 // .byte 4
	BYTE $0xbf // .byte 191
	BYTE $0xbf // .byte 191
	BYTE $0xb9 // .byte 185
	BYTE $0xb9 // .byte 185
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0

LCPI1_1:
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x11 // .byte 17
	BYTE $0x04 // .byte 4
	BYTE $0xbf // .byte 191
	BYTE $0xbf // .byte 191
	BYTE $0xb9 // .byte 185
	BYTE $0xb9 // .byte 185
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x11 // .byte 17
	BYTE $0x04 // .byte 4
	BYTE $0xbf // .byte 191
	BYTE $0xbf // .byte 191
	BYTE $0xb9 // .byte 185
	BYTE $0xb9 // .byte 185
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0

LCPI1_2:
	BYTE $0xa8 // .byte 168
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf0 // .byte 240
	BYTE $0x54 // .byte 84
	BYTE $0x50 // .byte 80
	BYTE $0x50 // .byte 80
	BYTE $0x50 // .byte 80
	BYTE $0x54 // .byte 84
	BYTE $0xa8 // .byte 168
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf0 // .byte 240
	BYTE $0x54 // .byte 84
	BYTE $0x50 // .byte 80
	BYTE $0x50 // .byte 80
	BYTE $0x50 // .byte 80
	BYTE $0x54 // .byte 84

LCPI1_3:
	BYTE $0xa8 // .byte 168
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf0 // .byte 240
	BYTE $0x50 // .byte 80
	BYTE $0x50 // .byte 80
	BYTE $0x54 // .byte 84
	BYTE $0x50 // .byte 80
	BYTE $0x70 // .byte 112
	BYTE $0xa8 // .byte 168
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf0 // .byte 240
	BYTE $0x50 // .byte 80
	BYTE $0x50 // .byte 80
	BYTE $0x54 // .byte 84
	BYTE $0x50 // .byte 80
	BYTE $0x70 // .byte 112

LCPI1_4:
	QUAD $0x2f2f2f2f2f2f2f2f; QUAD $0x2f2f2f2f2f2f2f2f // .space 16, '////////////////'
	QUAD $0x2f2f2f2f2f2f2f2f; QUAD $0x2f2f2f2f2f2f2f2f // .space 16, '////////////////'

LCPI1_5:
	QUAD $0x5f5f5f5f5f5f5f5f; QUAD $0x5f5f5f5f5f5f5f5f // .space 16, '________________'
	QUAD $0x5f5f5f5f5f5f5f5f; QUAD $0x5f5f5f5f5f5f5f5f // .space 16, '________________'

LCPI1_6:
	QUAD $0x1010101010101010; QUAD $0x1010101010101010 // .space 16, '\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10'
	QUAD $0x1010101010101010; QUAD $0x1010101010101010 // .space 16, '\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10'

LCPI1_7:
	QUAD $0x2020202020202020; QUAD $0x2020202020202020 // .space 16, '                '
	QUAD $0x2020202020202020; QUAD $0x2020202020202020 // .space 16, '                '

LCPI1_8:
	QUAD $0x0f0f0f0f0f0f0f0f; QUAD $0x0f0f0f0f0f0f0f0f // .space 16, '\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f'
	QUAD $0x0f0f0f0f0f0f0f0f; QUAD $0x0f0f0f0f0f0f0f0f // .space 16, '\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f'

LCPI1_9:
	BYTE $0x01 // .byte 1
	BYTE $0x02 // .byte 2
	BYTE $0x04 // .byte 4
	BYTE $0x08 // .byte 8
	BYTE $0x10 // .byte 16
	BYTE $0x20 // .byte 32
	BYTE $0x40 // .byte 64
	BYTE $0x80 // .byte 128
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x01 // .byte 1
	BYTE $0x02 // .byte 2
	BYTE $0x04 // .byte 4
	BYTE $0x08 // .byte 8
	BYTE $0x10 // .byte 16
	BYTE $0x20 // .byte 32
	BYTE $0x40 // .byte 64
	BYTE $0x80 // .byte 128
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0

LCPI1_10:
	QUAD $0x3f3f3f3f3f3f3f3f; QUAD $0x3f3f3f3f3f3f3f3f // .space 16, '????????????????'
	QUAD $0x3f3f3f3f3f3f3f3f; QUAD $0x3f3f3f3f3f3f3f3f // .space 16, '????????????????'

LCPI1_11:
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1

LCPI1_12:
	WORD $0x1000 // .word 4096
	WORD $0x0001 // .word 1
	WORD $0x1000 // .word 4096
	WORD $0x0001 // .word 1
	WORD $0x1000 // .word 4096
	WORD $0x0001 // .word 1
	WORD $0x1000 // .word 4096
	WORD $0x0001 // .word 1
	WORD $0x1000 // .word 4096
	WORD $0x0001 // .word 1
	WORD $0x1000 // .word 4096
	WORD $0x0001 // .word 1
	WORD $0x1000 // .word 4096
	WORD $0x0001 // .word 1
	WORD $0x1000 // .word 4096
	WORD $0x0001 // .word 1

LCPI1_14:
	BYTE $0x02 // .byte 2
	BYTE $0x01 // .byte 1
	BYTE $0x00 // .byte 0
	BYTE $0x06 // .byte 6
	BYTE $0x05 // .byte 5
	BYTE $0x04 // .byte 4
	BYTE $0x0a // .byte 10
	BYTE $0x09 // .byte 9
	BYTE $0x08 // .byte 8
	BYTE $0x0e // .byte 14
	BYTE $0x0d // .byte 13
	BYTE $0x0c // .byte 12
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x05 // .byte 5
	BYTE $0x04 // .byte 4
	BYTE $0x0a // .byte 10
	BYTE $0x09 // .byte 9
	BYTE $0x08 // .byte 8
	BYTE $0x0e // .byte 14
	BYTE $0x0d // .byte 13
	BYTE $0x0c // .byte 12
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'

LCPI1_13:
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x02 // .byte 2
	BYTE $0x01 // .byte 1
	BYTE $0x00 // .byte 0
	BYTE $0x06 // .byte 6

_b64decode:
	BYTE  $0x55                                 // pushq        %rbp
	WORD  $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	WORD  $0x5741                               // pushq        %r15
	WORD  $0x5641                               // pushq        %r14
	WORD  $0x5541                               // pushq        %r13
	WORD  $0x5441                               // pushq        %r12
	BYTE  $0x53                                 // pushq        %rbx
	SUBQ  $96, SP
	TESTQ DX, DX
	JE    LBB1_8
	MOVQ  0(DI), AX
	MOVQ  8(DI), R9
	ADDQ  AX, R9
	MOVQ  DI, -88(BP)
	ADDQ  16(DI), AX
	MOVQ  AX, -64(BP)
	LEAQ  0(SI)(DX*1), R10
	TESTB $1, CX
	MOVL  CX, -44(BP)
	LONG  $0x63058d48; WORD $0x000a; BYTE $0x00 // leaq         $2659(%rip), %rax  /* _VecDecodeCharsetStd(%rip) */
	LONG  $0x5c1d8d4c; WORD $0x000b; BYTE $0x00 // leaq         $2908(%rip), %r11  /* _VecDecodeCharsetURL(%rip) */
	LONG  $0xd8440f4c                           // cmoveq       %rax, %r11
	TESTB $4, -44(BP)
	MOVQ  SI, -80(BP)
	JE    LBB1_9
	LEAQ  -32(SI)(DX*1), R15
	MOVQ  SI, DX
	MOVQ  R9, AX
	MOVQ  SI, DI
	CMPQ  R15, SI
	JB    LBB1_52
	TESTB $1, -44(BP)
	JE    LBB1_10
	QUAD  $0xfffffdd5056ffec5                   // vmovdqu      $-555(%rip), %ymm0  /* LCPI1_1(%rip) */
	JNE   LBB1_11

LBB1_5:
	QUAD $0xfffffdeb0d6ffec5 // vmovdqu      $-533(%rip), %ymm1  /* LCPI1_2(%rip) */
	JNE  LBB1_12

LBB1_6:
	QUAD $0xfffffe21156ffec5 // vmovdqu      $-479(%rip), %ymm2  /* LCPI1_4(%rip) */
	JNE  LBB1_13

LBB1_7:
	QUAD $0xfffffe571d6ffec5 // vmovdqu      $-425(%rip), %ymm3  /* LCPI1_6(%rip) */
	JMP  LBB1_14

LBB1_8:
	XORL AX, AX
	JMP  LBB1_205

LBB1_9:
	MOVQ SI, DX
	MOVQ R9, AX
	MOVQ SI, DI
	JMP  LBB1_52

LBB1_10:
	QUAD $0xfffffd78056ffec5 // vmovdqu      $-648(%rip), %ymm0  /* LCPI1_0(%rip) */
	JE   LBB1_5

LBB1_11:
	QUAD $0xfffffdce0d6ffec5 // vmovdqu      $-562(%rip), %ymm1  /* LCPI1_3(%rip) */
	JE   LBB1_6

LBB1_12:
	QUAD $0xfffffe04156ffec5 // vmovdqu      $-508(%rip), %ymm2  /* LCPI1_5(%rip) */
	JE   LBB1_7

LBB1_13:
	QUAD $0xfffffe3a1d6ffec5 // vmovdqu      $-454(%rip), %ymm3  /* LCPI1_7(%rip) */

LBB1_14:
	MOVQ -64(BP), AX
	LEAQ -32(AX), R8
	LEAQ -1(R10), R12
	QUAD $0xfffffe46256ffec5 // vmovdqu      $-442(%rip), %ymm4  /* LCPI1_8(%rip) */
	QUAD $0xfffffe5e2d6ffec5 // vmovdqu      $-418(%rip), %ymm5  /* LCPI1_9(%rip) */
	LONG $0xf6efc9c5         // vpxor        %xmm6, %xmm6, %xmm6
	QUAD $0xfffffe92056f7ec5 // vmovdqu      $-366(%rip), %ymm8  /* LCPI1_11(%rip) */
	QUAD $0xfffffeaa0d6f7ec5 // vmovdqu      $-342(%rip), %ymm9  /* LCPI1_12(%rip) */
	QUAD $0xfffffee2156f7ac5 // vmovdqu      $-286(%rip), %xmm10  /* LCPI1_13(%rip) */
	QUAD $0xfffffeba1d6f7ec5 // vmovdqu      $-326(%rip), %ymm11  /* LCPI1_14(%rip) */
	MOVQ $-4294967296, R13
	MOVQ -80(BP), AX
	MOVQ AX, BX
	MOVQ AX, SI
	MOVQ R9, AX
	JMP  LBB1_18

LBB1_15:
	LONG $0x207f7ac5               // vmovdqu      %xmm12, (%rax)
	LONG $0x397d63c4; WORD $0x01e7 // vextracti128 $1, %ymm12, %xmm7
	LONG $0x78d6f9c5; BYTE $0x10   // vmovq        %xmm7, $16(%rax)

LBB1_16:
	ADDQ $32, BX
	ADDQ $24, AX
	MOVQ BX, SI
	MOVQ SI, BX
	CMPQ R15, SI
	JB   LBB1_51

LBB1_18:
	MOVQ AX, DI
	LONG $0x266f7ec5               // vmovdqu      (%rsi), %ymm12
	LONG $0x7215c1c4; WORD $0x04d4 // vpsrld       $4, %ymm12, %ymm13
	LONG $0xecdb15c5               // vpand        %ymm4, %ymm13, %ymm13
	LONG $0xf4db1dc5               // vpand        %ymm4, %ymm12, %ymm14
	LONG $0x007542c4; BYTE $0xf6   // vpshufb      %ymm14, %ymm1, %ymm14
	LONG $0x005542c4; BYTE $0xfd   // vpshufb      %ymm13, %ymm5, %ymm15
	LONG $0xdb0541c4; BYTE $0xf6   // vpand        %ymm14, %ymm15, %ymm14
	LONG $0xf6740dc5               // vpcmpeqb     %ymm6, %ymm14, %ymm14
	LONG $0xd77dc1c4; BYTE $0xc6   // vpmovmskb    %ymm14, %eax
	ORQ  R13, AX
	BSFQ AX, AX
	CMPL AX, $31
	JA   LBB1_32
	XORL AX, AX
	CMPQ R10, BX
	JBE  LBB1_34
	XORL DX, DX

LBB1_21:
	MOVBLZX 0(BX), CX
	CMPQ    CX, $10
	JE      LBB1_25
	CMPB    CX, $13
	JE      LBB1_25
	MOVBLZX 0(R11)(CX*1), CX
	CMPL    CX, $255
	JE      LBB1_27
	INCL    AX
	SHLL    $6, DX
	ORL     CX, DX

LBB1_25:
	INCQ BX
	CMPQ BX, R10
	JAE  LBB1_27
	CMPL AX, $4
	JL   LBB1_21

LBB1_27:
	CMPL AX, $1
	JE   LBB1_49
	CMPL AX, $3
	JG   LBB1_41
	CMPQ BX, R10
	JE   LBB1_39
	CMPL AX, $3
	JNE  LBB1_35
	CMPB 0(BX), $61
	LEAQ 1(BX), BX
	MOVL $3, AX
	JE   LBB1_38
	JMP  LBB1_49

LBB1_32:
	LONG $0x007d42c4; BYTE $0xed   // vpshufb      %ymm13, %ymm0, %ymm13
	LONG $0xf2741dc5               // vpcmpeqb     %ymm2, %ymm12, %ymm14
	LONG $0x4c1563c4; WORD $0xe0eb // vpblendvb    %ymm14, %ymm3, %ymm13, %ymm13
	LONG $0xfc1541c4; BYTE $0xe4   // vpaddb       %ymm12, %ymm13, %ymm12
	QUAD $0xfffffd5725db1dc5       // vpand        $-681(%rip), %ymm12, %ymm12  /* LCPI1_10(%rip) */
	LONG $0x041d42c4; BYTE $0xe0   // vpmaddubsw   %ymm8, %ymm12, %ymm12
	LONG $0xf51d41c4; BYTE $0xe1   // vpmaddwd     %ymm9, %ymm12, %ymm12
	LONG $0x397d63c4; WORD $0x01e7 // vextracti128 $1, %ymm12, %xmm7
	LONG $0x0041c2c4; BYTE $0xfa   // vpshufb      %xmm10, %xmm7, %xmm7
	LONG $0x001d42c4; BYTE $0xe3   // vpshufb      %ymm11, %ymm12, %ymm12
	LONG $0x021de3c4; WORD $0x08ff // vpblendd     $8, %ymm7, %ymm12, %ymm7
	LONG $0x024563c4; WORD $0xc0e6 // vpblendd     $192, %ymm6, %ymm7, %ymm12
	MOVQ DI, AX
	CMPQ R8, DI
	JB   LBB1_15
	LONG $0x207f7ec5               // vmovdqu      %ymm12, (%rax)
	JMP  LBB1_16

LBB1_34:
	MOVL $0, DX
	CMPQ R10, BX
	JE   LBB1_39

LBB1_35:
	CMPQ BX, R12
	JAE  LBB1_49
	CMPB 0(BX), $61
	JNE  LBB1_48
	CMPB 1(BX), $61
	LEAQ 2(BX), BX
	JNE  LBB1_49

LBB1_38:
	CMPQ BX, R10
	JAE  LBB1_40
	JMP  LBB1_49

LBB1_39:
	MOVQ  R10, BX
	TESTB $2, -44(BP)
	JE    LBB1_49

LBB1_40:
	MOVB    $4, CX
	SUBB    AX, CX
	MOVBLZX CX, CX
	ADDL    CX, CX
	LEAL    0(CX)(CX*2), CX
	SHLL    CX, DX

LBB1_41:
	CMPL AX, $2
	JE   LBB1_46
	CMPL AX, $3
	JE   LBB1_45
	CMPL AX, $4
	MOVQ DI, CX
	JNE  LBB1_47
	MOVB DX, 2(CX)

LBB1_45:
	MOVQ DI, CX
	MOVB DH, 1(DI)

LBB1_46:
	SHRL $16, DX
	MOVQ DI, CX
	MOVB DX, 0(DI)

LBB1_47:
	WORD $0x9848          // cltq
	LEAQ -1(CX)(AX*1), AX
	MOVQ BX, SI
	MOVQ SI, BX
	CMPQ R15, SI
	JAE  LBB1_18
	JMP  LBB1_51

LBB1_48:
	INCQ BX

LBB1_49:
	SUBQ SI, BX
	JNE  LBB1_189
	MOVQ DI, AX
	MOVQ SI, BX
	CMPQ R15, SI
	JAE  LBB1_18

LBB1_51:
	MOVQ SI, DI
	MOVQ SI, DX

LBB1_52:
	MOVQ -64(BP), CX
	ADDQ $-8, CX
	MOVQ CX, -136(BP)
	CMPQ CX, AX
	MOVQ R11, -72(BP)
	MOVQ R9, -96(BP)
	JB   LBB1_92
	LEAQ -8(R10), CX
	MOVQ CX, -128(BP)
	CMPQ CX, DX
	JB   LBB1_92
	LEAQ -1(R10), CX
	MOVQ CX, -120(BP)
	MOVQ R10, -104(BP)

LBB1_55:
	MOVQ    DI, -112(BP)
	MOVQ    AX, -56(BP)
	MOVBQSX 0(DX), CX
	MOVBLZX 0(R11)(CX*1), R13
	MOVBQSX 1(DX), AX
	MOVBLZX 0(R11)(AX*1), R15
	MOVBQSX 2(DX), AX
	MOVBLZX 0(R11)(AX*1), R14
	MOVBQSX 3(DX), AX
	MOVBLZX 0(R11)(AX*1), AX
	MOVBQSX 4(DX), SI
	MOVBLZX 0(R11)(SI*1), R8
	MOVBQSX 5(DX), SI
	MOVBLZX 0(R11)(SI*1), R10
	MOVBQSX 6(DX), BX
	MOVBLZX 0(R11)(BX*1), BX
	MOVL    R15, DI
	ORL     R13, DI
	MOVL    AX, R9
	ORL     R14, R9
	ORL     DI, R9
	MOVL    R10, DI
	ORL     R8, DI
	MOVQ    R11, SI
	MOVL    BX, R11
	ORL     DI, R11
	MOVBQSX 7(DX), DI
	MOVBLZX 0(SI)(DI*1), R12
	ORL     R9, R11
	MOVL    R12, DI
	ORL     R11, DI
	CMPB    DI, $-1
	JE      LBB1_57
	SHLQ    $58, R13
	SHLQ    $52, R15
	ORQ     R13, R15
	SHLQ    $46, R14
	SHLQ    $40, AX
	ORQ     R14, AX
	ORQ     R15, AX
	SHLQ    $34, R8
	SHLQ    $28, R10
	ORQ     R8, R10
	SHLQ    $22, BX
	ORQ     R10, BX
	ORQ     AX, BX
	SHLQ    $16, R12
	ORQ     BX, R12
	BSWAPQ  R12
	MOVQ    -56(BP), AX
	MOVQ    R12, 0(AX)
	ADDQ    $8, DX
	ADDQ    $6, AX
	MOVQ    DX, DI
	MOVQ    -72(BP), R11
	MOVQ    -104(BP), R10
	JMP     LBB1_88

LBB1_57:
	MOVQ -104(BP), R10
	CMPQ R10, DX
	JBE  LBB1_65
	INCQ DX
	XORL BX, BX
	XORL AX, AX
	MOVQ -72(BP), R11
	MOVQ -112(BP), DI
	CMPB CX, $10
	JE   LBB1_62

LBB1_59:
	CMPB    CX, $13
	JE      LBB1_62
	MOVBLZX CX, CX
	MOVBLZX 0(R11)(CX*1), CX
	CMPL    CX, $255
	JE      LBB1_69
	INCL    BX
	SHLL    $6, AX
	ORL     CX, AX

LBB1_62:
	CMPQ    DX, R10
	JAE     LBB1_70
	CMPL    BX, $3
	JG      LBB1_70
	MOVBLZX 0(DX), CX
	INCQ    DX
	CMPB    CX, $10
	JNE     LBB1_59
	JMP     LBB1_62

LBB1_65:
	XORL BX, BX
	MOVL $0, AX
	CMPQ R10, DX
	MOVQ -72(BP), R11
	MOVQ -112(BP), DI
	JE   LBB1_76

LBB1_66:
	CMPQ DX, -120(BP)
	JAE  LBB1_86
	CMPB 0(DX), $61
	JNE  LBB1_85
	CMPB 1(DX), $61
	LEAQ 2(DX), DX
	JE   LBB1_75
	JMP  LBB1_86

LBB1_69:
	DECQ DX

LBB1_70:
	CMPL BX, $1
	JE   LBB1_86
	CMPL BX, $3
	JG   LBB1_78
	CMPQ DX, R10
	JE   LBB1_76
	CMPL BX, $3
	JNE  LBB1_66
	CMPB 0(DX), $61
	LEAQ 1(DX), DX
	MOVL $3, BX
	JNE  LBB1_86

LBB1_75:
	CMPQ DX, R10
	JAE  LBB1_77
	JMP  LBB1_86

LBB1_76:
	MOVQ  R10, DX
	TESTB $2, -44(BP)
	JE    LBB1_86

LBB1_77:
	MOVB    $4, CX
	SUBB    BX, CX
	MOVBLZX CX, CX
	ADDL    CX, CX
	LEAL    0(CX)(CX*2), CX
	SHLL    CX, AX

LBB1_78:
	CMPL BX, $2
	JE   LBB1_83
	CMPL BX, $3
	JE   LBB1_82
	CMPL BX, $4
	MOVQ -56(BP), CX
	JNE  LBB1_84
	MOVB AX, 2(CX)

LBB1_82:
	MOVQ -56(BP), CX
	MOVB AH, 1(CX)

LBB1_83:
	SHRL $16, AX
	MOVQ -56(BP), CX
	MOVB AX, 0(CX)

LBB1_84:
	MOVLQSX BX, AX
	LEAQ    -1(CX)(AX*1), AX
	MOVQ    DX, DI
	JMP     LBB1_88

LBB1_85:
	INCQ DX

LBB1_86:
	SUBQ DI, DX
	JNE  LBB1_190
	MOVQ -56(BP), AX

LBB1_88:
	CMPQ -136(BP), AX
	JB   LBB1_90
	MOVQ DI, DX
	CMPQ -128(BP), DI
	JAE  LBB1_55

LBB1_90:
	MOVQ DI, DX
	MOVQ DI, R8
	MOVQ -96(BP), R9
	JMP  LBB1_93

LBB1_92:
	MOVQ DI, R8

LBB1_93:
	MOVQ  R8, R14
	NEGQ  R8
	MOVQ  -64(BP), CX
	ADDQ  $-4, CX
	MOVQ  CX, -64(BP)
	CMPQ  CX, AX
	JB    LBB1_173
	LEAQ  -4(R10), R15
	CMPQ  R15, DX
	JB    LBB1_173
	LEAQ  -1(R10), CX
	MOVQ  CX, -56(BP)
	TESTB $2, -44(BP)
	JNE   LBB1_136
	MOVQ  DX, BX
	MOVQ  R14, R12

LBB1_97:
	MOVQ    AX, R9
	MOVBQSX 0(BX), DX
	MOVBLZX 0(R11)(DX*1), R13
	MOVBQSX 1(BX), AX
	MOVBLZX 0(R11)(AX*1), DI
	MOVBQSX 2(BX), SI
	MOVBLZX 0(R11)(SI*1), R14
	MOVBQSX 3(BX), SI
	MOVBLZX 0(R11)(SI*1), SI
	MOVL    DI, AX
	ORL     R13, AX
	MOVL    R14, CX
	ORL     SI, CX
	ORL     AX, CX
	CMPB    CX, $-1
	JE      LBB1_99
	SHLL    $26, R13
	SHLL    $20, DI
	ORL     R13, DI
	SHLL    $14, R14
	SHLL    $8, SI
	ORL     R14, SI
	ORL     DI, SI
	BSWAPL  SI
	MOVQ    R9, AX
	MOVL    SI, 0(R9)
	ADDQ    $4, BX
	ADDQ    $3, AX

LBB1_134:
	MOVQ BX, R12
	MOVQ R12, R8
	NEGQ R8
	CMPQ -64(BP), AX
	JAE  LBB1_125
	JMP  LBB1_135

LBB1_99:
	CMPQ R10, BX
	JBE  LBB1_107
	INCQ BX
	XORL AX, AX
	XORL SI, SI
	CMPB DX, $10
	JE   LBB1_104

LBB1_101:
	CMPB    DX, $13
	JE      LBB1_104
	MOVBLZX DX, CX
	MOVBLZX 0(R11)(CX*1), CX
	CMPL    CX, $255
	JE      LBB1_112
	INCL    AX
	SHLL    $6, SI
	ORL     CX, SI

LBB1_104:
	CMPQ    BX, R10
	JAE     LBB1_113
	CMPL    AX, $3
	JG      LBB1_113
	MOVBLZX 0(BX), DX
	INCQ    BX
	CMPB    DX, $10
	JNE     LBB1_101
	JMP     LBB1_104

LBB1_107:
	XORL SI, SI
	MOVL $0, AX
	MOVQ R10, DX
	CMPQ R10, BX
	JE   LBB1_123

LBB1_108:
	CMPQ BX, -56(BP)
	JAE  LBB1_122
	CMPB 0(BX), $61
	JNE  LBB1_121
	LEAQ 2(BX), DX
	CMPB 1(BX), $61
	MOVQ DX, BX
	JE   LBB1_119
	JMP  LBB1_123

LBB1_112:
	DECQ BX

LBB1_113:
	CMPL AX, $1
	JE   LBB1_122
	CMPL AX, $3
	JG   LBB1_127
	MOVQ R10, DX
	CMPQ BX, R10
	JE   LBB1_123
	CMPL AX, $3
	JNE  LBB1_108
	LEAQ 1(BX), DX
	MOVL $3, AX
	CMPB 0(BX), $61
	MOVQ DX, BX
	JNE  LBB1_123

LBB1_119:
	CMPQ    BX, R10
	JB      LBB1_122
	MOVB    $4, CX
	SUBB    AX, CX
	MOVBLZX CX, CX
	ADDL    CX, CX
	LEAL    0(CX)(CX*2), CX
	SHLL    CX, SI

LBB1_127:
	CMPL AX, $2
	JE   LBB1_132
	CMPL AX, $3
	JE   LBB1_131
	CMPL AX, $4
	MOVQ R9, CX
	JNE  LBB1_133
	MOVL SI, DX
	MOVB DX, 2(CX)

LBB1_131:
	MOVQ R9, CX
	MOVL SI, DX
	MOVB DH, 1(CX)

LBB1_132:
	SHRL $16, SI
	MOVQ R9, CX
	MOVB SI, 0(R9)

LBB1_133:
	WORD $0x9848          // cltq
	LEAQ -1(CX)(AX*1), AX
	JMP  LBB1_134

LBB1_121:
	INCQ BX

LBB1_122:
	MOVQ BX, DX

LBB1_123:
	SUBQ R12, DX
	MOVQ R9, AX
	JNE  LBB1_183
	MOVQ R12, R8
	NEGQ R8
	CMPQ -64(BP), AX
	JB   LBB1_135

LBB1_125:
	MOVQ R12, BX
	CMPQ R15, R12
	JAE  LBB1_97

LBB1_135:
	MOVQ R12, R14
	MOVQ R12, DX
	JMP  LBB1_172

LBB1_136:
	MOVQ R14, DI

LBB1_137:
	MOVQ    DI, R12
	MOVQ    AX, R14
	MOVBQSX 0(DX), SI
	MOVQ    R11, CX
	MOVBLZX 0(R11)(SI*1), R11
	MOVBQSX 1(DX), AX
	MOVBLZX 0(CX)(AX*1), BX
	MOVBQSX 2(DX), DI
	MOVBLZX 0(CX)(DI*1), R9
	MOVBQSX 3(DX), DI
	MOVBLZX 0(CX)(DI*1), DI
	MOVL    BX, AX
	ORL     R11, AX
	MOVL    R9, CX
	ORL     DI, CX
	ORL     AX, CX
	CMPB    CX, $-1
	JE      LBB1_139
	SHLL    $26, R11
	SHLL    $20, BX
	ORL     R11, BX
	SHLL    $14, R9
	SHLL    $8, DI
	ORL     R9, DI
	ORL     BX, DI
	BSWAPL  DI
	MOVQ    R14, AX
	MOVL    DI, 0(R14)
	ADDQ    $4, DX
	ADDQ    $3, AX
	MOVQ    DX, DI
	MOVQ    -72(BP), R11
	MOVQ    DI, R8
	NEGQ    R8
	CMPQ    -64(BP), AX
	JAE     LBB1_161
	JMP     LBB1_171

LBB1_139:
	CMPQ R10, DX
	JBE  LBB1_147
	INCQ DX
	XORL AX, AX
	XORL BX, BX
	MOVQ -72(BP), R11
	MOVQ R12, DI
	CMPB SI, $10
	JE   LBB1_144

LBB1_141:
	CMPB    SI, $13
	JE      LBB1_144
	MOVBLZX SI, CX
	MOVBLZX 0(R11)(CX*1), CX
	CMPL    CX, $255
	JE      LBB1_151
	INCL    AX
	SHLL    $6, BX
	ORL     CX, BX

LBB1_144:
	CMPQ    DX, R10
	JAE     LBB1_152
	CMPL    AX, $3
	JG      LBB1_152
	MOVBLZX 0(DX), SI
	INCQ    DX
	CMPB    SI, $10
	JNE     LBB1_141
	JMP     LBB1_144

LBB1_147:
	XORL BX, BX
	MOVL $0, AX
	MOVQ R10, SI
	CMPQ R10, DX
	MOVQ -72(BP), R11
	MOVQ R12, DI
	JE   LBB1_163

LBB1_148:
	CMPQ DX, -56(BP)
	JAE  LBB1_159
	CMPB 0(DX), $61
	JNE  LBB1_158
	LEAQ 2(DX), SI
	CMPB 1(DX), $61
	MOVQ SI, DX
	JE   LBB1_157
	JMP  LBB1_159

LBB1_151:
	DECQ DX

LBB1_152:
	CMPL AX, $1
	JE   LBB1_159
	CMPL AX, $3
	JG   LBB1_164
	CMPQ DX, R10
	JE   LBB1_162
	CMPL AX, $3
	JNE  LBB1_148
	LEAQ 1(DX), SI
	MOVL $3, AX
	CMPB 0(DX), $61
	MOVQ SI, DX
	JNE  LBB1_159

LBB1_157:
	MOVQ SI, DX
	CMPQ SI, R10
	JB   LBB1_159
	JMP  LBB1_163

LBB1_158:
	INCQ DX

LBB1_159:
	SUBQ DI, DX
	MOVQ R14, AX
	JNE  LBB1_183
	MOVQ DI, R8
	NEGQ R8
	CMPQ -64(BP), AX
	JB   LBB1_171

LBB1_161:
	MOVQ DI, DX
	CMPQ R15, DI
	JAE  LBB1_137
	JMP  LBB1_171

LBB1_162:
	MOVQ R10, SI

LBB1_163:
	MOVB    $4, CX
	SUBB    AX, CX
	MOVBLZX CX, CX
	ADDL    CX, CX
	LEAL    0(CX)(CX*2), CX
	SHLL    CX, BX
	MOVQ    SI, DX

LBB1_164:
	CMPL AX, $2
	JE   LBB1_169
	CMPL AX, $3
	JE   LBB1_168
	CMPL AX, $4
	MOVQ R14, CX
	JNE  LBB1_170
	MOVB BX, 2(CX)

LBB1_168:
	MOVQ R14, CX
	MOVB BH, 1(CX)

LBB1_169:
	SHRL $16, BX
	MOVQ R14, CX
	MOVB BX, 0(R14)

LBB1_170:
	WORD $0x9848          // cltq
	LEAQ -1(CX)(AX*1), AX
	MOVQ DX, DI
	MOVQ DI, R8
	NEGQ R8
	CMPQ -64(BP), AX
	JAE  LBB1_161

LBB1_171:
	MOVQ DI, R14
	MOVQ DI, DX

LBB1_172:
	MOVQ -96(BP), R9

LBB1_173:
	CMPQ R10, DX
	JBE  LBB1_184
	MOVQ AX, SI
	XORL AX, AX
	XORL BX, BX

LBB1_175:
	MOVBLZX 0(DX), CX
	CMPQ    CX, $10
	JE      LBB1_179
	CMPB    CX, $13
	JE      LBB1_179
	MOVBLZX 0(R11)(CX*1), CX
	CMPL    CX, $255
	JE      LBB1_181
	INCL    AX
	SHLL    $6, BX
	ORL     CX, BX

LBB1_179:
	INCQ DX
	CMPQ DX, R10
	JAE  LBB1_181
	CMPL AX, $4
	JL   LBB1_175

LBB1_181:
	CMPL AX, $1
	JNE  LBB1_185

LBB1_182:
	SUBQ R14, DX
	MOVQ -88(BP), CX
	MOVQ SI, AX
	JE   LBB1_204

LBB1_183:
	ADDQ -80(BP), R8
	SUBQ DX, R8
	MOVQ R8, AX
	JMP  LBB1_205

LBB1_184:
	MOVQ -88(BP), CX
	JMP  LBB1_204

LBB1_185:
	CMPL AX, $3
	JG   LBB1_197
	CMPQ DX, R10
	JE   LBB1_191
	CMPL AX, $3
	JNE  LBB1_192
	CMPB 0(DX), $61
	LEAQ 1(DX), DX
	JNE  LBB1_182
	JMP  LBB1_195

LBB1_189:
	MOVQ -80(BP), AX
	SUBQ SI, AX
	SUBQ BX, AX
	JMP  LBB1_205

LBB1_190:
	MOVQ -80(BP), AX
	SUBQ DI, AX
	SUBQ DX, AX
	JMP  LBB1_205

LBB1_191:
	MOVQ  R10, DX
	TESTB $2, -44(BP)
	JE    LBB1_182
	JMP   LBB1_196

LBB1_192:
	LEAQ -1(R10), CX
	CMPQ DX, CX
	JAE  LBB1_182
	CMPB 0(DX), $61
	JNE  LBB1_206
	CMPB 1(DX), $61
	LEAQ 2(DX), DX
	JNE  LBB1_182

LBB1_195:
	CMPQ DX, R10
	JB   LBB1_182

LBB1_196:
	MOVB    $4, CX
	SUBB    AX, CX
	MOVBLZX CX, CX
	ADDL    CX, CX
	LEAL    0(CX)(CX*2), CX
	SHLL    CX, BX

LBB1_197:
	MOVQ -88(BP), CX
	CMPL AX, $2
	JE   LBB1_202
	CMPL AX, $3
	JE   LBB1_201
	CMPL AX, $4
	MOVQ SI, DX
	JNE  LBB1_203
	MOVB BX, 2(DX)

LBB1_201:
	MOVQ SI, DX
	MOVB BH, 1(SI)

LBB1_202:
	SHRL $16, BX
	MOVQ SI, DX
	MOVB BX, 0(SI)

LBB1_203:
	WORD $0x9848          // cltq
	LEAQ -1(DX)(AX*1), AX

LBB1_204:
	SUBQ R9, AX
	ADDQ AX, 8(CX)

LBB1_205:
	ADDQ $96, SP
	BYTE $0x5b               // popq         %rbx
	WORD $0x5c41             // popq         %r12
	WORD $0x5d41             // popq         %r13
	WORD $0x5e41             // popq         %r14
	WORD $0x5f41             // popq         %r15
	BYTE $0x5d               // popq         %rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	RET

LBB1_206:
	INCQ DX
	JMP  LBB1_182

_TabEncodeCharsetStd:
	QUAD $0x4847464544434241; QUAD $0x504f4e4d4c4b4a49 // .ascii 16, 'ABCDEFGHIJKLMNOP'
	QUAD $0x5857565554535251; QUAD $0x6665646362615a59 // .ascii 16, 'QRSTUVWXYZabcdef'
	QUAD $0x6e6d6c6b6a696867; QUAD $0x767574737271706f // .ascii 16, 'ghijklmnopqrstuv'
	QUAD $0x333231307a797877; QUAD $0x2f2b393837363534 // .ascii 16, 'wxyz0123456789+/'

_VecEncodeCharsetStd:
	QUAD $0xfcfcfcfcfcfcfc47; QUAD $0x000041f0edfcfcfc // .asciz 16, 'G\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xed\xf0A\x00\x00'
	QUAD $0xfcfcfcfcfcfcfc47; QUAD $0x000041f0edfcfcfc // .asciz 16, 'G\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xed\xf0A\x00\x00'

_TabEncodeCharsetURL:
	QUAD $0x4847464544434241; QUAD $0x504f4e4d4c4b4a49 // .ascii 16, 'ABCDEFGHIJKLMNOP'
	QUAD $0x5857565554535251; QUAD $0x6665646362615a59 // .ascii 16, 'QRSTUVWXYZabcdef'
	QUAD $0x6e6d6c6b6a696867; QUAD $0x767574737271706f // .ascii 16, 'ghijklmnopqrstuv'
	QUAD $0x333231307a797877; QUAD $0x5f2d393837363534 // .ascii 16, 'wxyz0123456789-_'

_VecEncodeCharsetURL:
	QUAD $0xfcfcfcfcfcfcfc47; QUAD $0x00004120effcfcfc // .asciz 16, 'G\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xef A\x00\x00'
	QUAD $0xfcfcfcfcfcfcfc47; QUAD $0x00004120effcfcfc // .asciz 16, 'G\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xef A\x00\x00'

_VecDecodeCharsetStd:
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0x3fffffff3effffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff>\xff\xff\xff?'
	QUAD $0x3b3a393837363534; QUAD $0xffffffffffff3d3c // .ascii 16, '456789:;<=\xff\xff\xff\xff\xff\xff'
	QUAD $0x06050403020100ff; QUAD $0x0e0d0c0b0a090807 // .ascii 16, '\xff\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e'
	QUAD $0x161514131211100f; QUAD $0xffffffffff191817 // .ascii 16, '\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\xff\xff\xff\xff\xff'
	QUAD $0x201f1e1d1c1b1aff; QUAD $0x2827262524232221 // .ascii 16, '\xff\x1a\x1b\x1c\x1d\x1e\x1f !"#$%&\'('
	QUAD $0x302f2e2d2c2b2a29; QUAD $0xffffffffff333231 // .ascii 16, ')*+,-./0123\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'

_VecDecodeCharsetURL:
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffff3effffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff>\xff\xff'
	QUAD $0x3b3a393837363534; QUAD $0xffffffffffff3d3c // .ascii 16, '456789:;<=\xff\xff\xff\xff\xff\xff'
	QUAD $0x06050403020100ff; QUAD $0x0e0d0c0b0a090807 // .ascii 16, '\xff\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e'
	QUAD $0x161514131211100f; QUAD $0x3fffffffff191817 // .ascii 16, '\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\xff\xff\xff\xff?'
	QUAD $0x201f1e1d1c1b1aff; QUAD $0x2827262524232221 // .ascii 16, '\xff\x1a\x1b\x1c\x1d\x1e\x1f !"#$%&\'('
	QUAD $0x302f2e2d2c2b2a29; QUAD $0xffffffffff333231 // .ascii 16, ')*+,-./0123\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'

TEXT Â·__b64decode(SB), NOSPLIT, $0 - 40
	MOVQ out+0(FP), DI
	MOVQ src+8(FP), SI
	MOVQ len+16(FP), DX
	MOVQ mode+24(FP), CX
	CALL Â·___asm2asm_compiled_code__DO_NOT_CALL_THIS_SYMBOL___+1489(SB) // _b64decode
	MOVQ AX, ret+32(FP)
	RET

TEXT Â·__b64encode(SB), NOSPLIT, $0 - 24
	MOVQ out+0(FP), DI
	MOVQ src+8(FP), SI
	MOVQ mode+16(FP), DX
	LEAQ Â·___asm2asm_compiled_code__DO_NOT_CALL_THIS_SYMBOL___+224(SB), AX // _b64encode
	JMP  AX
