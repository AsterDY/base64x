// +build !noasm !appengine
// Code generated by asm2asm, DO NOT EDIT.

#include "go_asm.h"
#include "textflag.h"

TEXT Â·__native_entry__(SB), NOSPLIT, $0
	LONG $0xf9058d48; WORD $0xffff; BYTE $0xff // leaq         $-7(%rip), %rax
	MOVQ AX, 8(SP)
	RET

LCPI0_0:
	BYTE $0x01 // .byte 1
	BYTE $0x00 // .byte 0
	BYTE $0x02 // .byte 2
	BYTE $0x01 // .byte 1
	BYTE $0x04 // .byte 4
	BYTE $0x03 // .byte 3
	BYTE $0x05 // .byte 5
	BYTE $0x04 // .byte 4
	BYTE $0x07 // .byte 7
	BYTE $0x06 // .byte 6
	BYTE $0x08 // .byte 8
	BYTE $0x07 // .byte 7
	BYTE $0x0a // .byte 10
	BYTE $0x09 // .byte 9
	BYTE $0x0b // .byte 11
	BYTE $0x0a // .byte 10
	BYTE $0x01 // .byte 1
	BYTE $0x00 // .byte 0
	BYTE $0x02 // .byte 2
	BYTE $0x01 // .byte 1
	BYTE $0x04 // .byte 4
	BYTE $0x03 // .byte 3
	BYTE $0x05 // .byte 5
	BYTE $0x04 // .byte 4
	BYTE $0x07 // .byte 7
	BYTE $0x06 // .byte 6
	BYTE $0x08 // .byte 8
	BYTE $0x07 // .byte 7
	BYTE $0x0a // .byte 10
	BYTE $0x09 // .byte 9
	BYTE $0x0b // .byte 11
	BYTE $0x0a // .byte 10

LCPI0_1:
	WORD $0xfc00 // .word 64512
	WORD $0x0fc0 // .word 4032
	WORD $0xfc00 // .word 64512
	WORD $0x0fc0 // .word 4032
	WORD $0xfc00 // .word 64512
	WORD $0x0fc0 // .word 4032
	WORD $0xfc00 // .word 64512
	WORD $0x0fc0 // .word 4032
	WORD $0xfc00 // .word 64512
	WORD $0x0fc0 // .word 4032
	WORD $0xfc00 // .word 64512
	WORD $0x0fc0 // .word 4032
	WORD $0xfc00 // .word 64512
	WORD $0x0fc0 // .word 4032
	WORD $0xfc00 // .word 64512
	WORD $0x0fc0 // .word 4032

LCPI0_2:
	WORD $0x0040 // .word 64
	WORD $0x0400 // .word 1024
	WORD $0x0040 // .word 64
	WORD $0x0400 // .word 1024
	WORD $0x0040 // .word 64
	WORD $0x0400 // .word 1024
	WORD $0x0040 // .word 64
	WORD $0x0400 // .word 1024
	WORD $0x0040 // .word 64
	WORD $0x0400 // .word 1024
	WORD $0x0040 // .word 64
	WORD $0x0400 // .word 1024
	WORD $0x0040 // .word 64
	WORD $0x0400 // .word 1024
	WORD $0x0040 // .word 64
	WORD $0x0400 // .word 1024

LCPI0_3:
	WORD $0x03f0 // .word 1008
	WORD $0x003f // .word 63
	WORD $0x03f0 // .word 1008
	WORD $0x003f // .word 63
	WORD $0x03f0 // .word 1008
	WORD $0x003f // .word 63
	WORD $0x03f0 // .word 1008
	WORD $0x003f // .word 63
	WORD $0x03f0 // .word 1008
	WORD $0x003f // .word 63
	WORD $0x03f0 // .word 1008
	WORD $0x003f // .word 63
	WORD $0x03f0 // .word 1008
	WORD $0x003f // .word 63
	WORD $0x03f0 // .word 1008
	WORD $0x003f // .word 63

LCPI0_4:
	QUAD $0x1a1a1a1a1a1a1a1a; QUAD $0x1a1a1a1a1a1a1a1a // .space 16, '\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a'
	QUAD $0x1a1a1a1a1a1a1a1a; QUAD $0x1a1a1a1a1a1a1a1a // .space 16, '\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a'

LCPI0_5:
	QUAD $0x3333333333333333; QUAD $0x3333333333333333 // .space 16, '3333333333333333'
	QUAD $0x3333333333333333; QUAD $0x3333333333333333 // .space 16, '3333333333333333'

LCPI0_6:
	QUAD $0x0d0d0d0d0d0d0d0d; QUAD $0x0d0d0d0d0d0d0d0d // .space 16, '\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r'
	QUAD $0x0d0d0d0d0d0d0d0d; QUAD $0x0d0d0d0d0d0d0d0d // .space 16, '\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r'

_b64encode:
	BYTE  $0x55                                 // pushq        %rbp
	WORD  $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	WORD  $0x5741                               // pushq        %r15
	WORD  $0x5641                               // pushq        %r14
	WORD  $0x5441                               // pushq        %r12
	BYTE  $0x53                                 // pushq        %rbx
	MOVQ  8(SI), R9
	TESTQ R9, R9
	JE    LBB0_26
	MOVQ  0(DI), R8
	ADDQ  8(DI), R8
	MOVQ  0(SI), R12
	ADDQ  R12, R9
	TESTB $1, DX
	LONG  $0x540d8d48; WORD $0x000d; BYTE $0x00 // leaq         $3412(%rip), %rcx  /* _VecEncodeCharsetStd(%rip) */
	LONG  $0xad158d4c; WORD $0x000d; BYTE $0x00 // leaq         $3501(%rip), %r10  /* _VecEncodeCharsetURL(%rip) */
	LONG  $0xd1440f4c                           // cmoveq       %rcx, %r10
	LONG  $0x020d8d48; WORD $0x000d; BYTE $0x00 // leaq         $3330(%rip), %rcx  /* _TabEncodeCharsetStd(%rip) */
	LONG  $0x5b1d8d4c; WORD $0x000d; BYTE $0x00 // leaq         $3419(%rip), %r11  /* _TabEncodeCharsetURL(%rip) */
	LONG  $0xd9440f4c                           // cmoveq       %rcx, %r11
	TESTB $4, DX
	JE    LBB0_2
	LEAQ  -28(R9), SI
	CMPQ  R12, SI
	JA    LBB0_4
	LONG  $0x6f7ec1c4; BYTE $0x02               // vmovdqu      (%r10), %ymm0
	QUAD  $0xfffffeb10d6ffec5                   // vmovdqu      $-335(%rip), %ymm1  /* LCPI0_0(%rip) */
	QUAD  $0xfffffec9156ffec5                   // vmovdqu      $-311(%rip), %ymm2  /* LCPI0_1(%rip) */
	QUAD  $0xfffffee11d6ffec5                   // vmovdqu      $-287(%rip), %ymm3  /* LCPI0_2(%rip) */
	QUAD  $0xfffffef9256ffec5                   // vmovdqu      $-263(%rip), %ymm4  /* LCPI0_3(%rip) */
	QUAD  $0xffffff112d6ffec5                   // vmovdqu      $-239(%rip), %ymm5  /* LCPI0_4(%rip) */
	QUAD  $0xffffff29356ffec5                   // vmovdqu      $-215(%rip), %ymm6  /* LCPI0_5(%rip) */
	QUAD  $0xffffff413d6ffec5                   // vmovdqu      $-191(%rip), %ymm7  /* LCPI0_6(%rip) */
	MOVQ  R8, R14

LBB0_6:
	LONG $0x6f7a41c4; WORD $0x2404 // vmovdqu      (%r12), %xmm8
	QUAD $0x010c2444383d43c4       // vinserti128  $1, $12(%r12), %ymm8, %ymm8
	LONG $0x003d62c4; BYTE $0xc1   // vpshufb      %ymm1, %ymm8, %ymm8
	LONG $0xcadb3dc5               // vpand        %ymm2, %ymm8, %ymm9
	LONG $0xcbe435c5               // vpmulhuw     %ymm3, %ymm9, %ymm9
	LONG $0xc4db3dc5               // vpand        %ymm4, %ymm8, %ymm8
	LONG $0x712dc1c4; WORD $0x08f0 // vpsllw       $8, %ymm8, %ymm10
	LONG $0x713dc1c4; WORD $0x04f0 // vpsllw       $4, %ymm8, %ymm8
	LONG $0x0e3d43c4; WORD $0xaac2 // vpblendw     $170, %ymm10, %ymm8, %ymm8
	LONG $0xeb3d41c4; BYTE $0xc1   // vpor         %ymm9, %ymm8, %ymm8
	LONG $0x645541c4; BYTE $0xc8   // vpcmpgtb     %ymm8, %ymm5, %ymm9
	LONG $0xcfdb35c5               // vpand        %ymm7, %ymm9, %ymm9
	LONG $0xd6d83dc5               // vpsubusb     %ymm6, %ymm8, %ymm10
	LONG $0xeb3541c4; BYTE $0xca   // vpor         %ymm10, %ymm9, %ymm9
	LONG $0x007d42c4; BYTE $0xc9   // vpshufb      %ymm9, %ymm0, %ymm9
	LONG $0xfc3541c4; BYTE $0xc0   // vpaddb       %ymm8, %ymm9, %ymm8
	LONG $0x7f7e41c4; BYTE $0x06   // vmovdqu      %ymm8, (%r14)
	ADDQ $32, R14
	ADDQ $24, R12
	CMPQ R12, SI
	JBE  LBB0_6
	JMP  LBB0_7

LBB0_2:
	MOVQ R8, R14

LBB0_7:
	LEAQ -24(R9), SI
	CMPQ R12, SI
	JA   LBB0_10

LBB0_8:
	MOVL DX, SI
	ANDL $4, SI
	JE   LBB0_10
	LONG $0x6f7ac1c4; WORD $0x2404             // vmovdqu      (%r12), %xmm0
	LONG $0x6f7ac1c4; WORD $0x244c; BYTE $0x08 // vmovdqu      $8(%r12), %xmm1
	LONG $0xd973f1c5; BYTE $0x04               // vpsrldq      $4, %xmm1, %xmm1
	LONG $0x387de3c4; WORD $0x01c1             // vinserti128  $1, %xmm1, %ymm0, %ymm0
	QUAD $0xfffddc05007de2c4; BYTE $0xff       // vpshufb      $-548(%rip), %ymm0, %ymm0  /* LCPI0_0(%rip) */
	QUAD $0xfffffdf40ddbfdc5                   // vpand        $-524(%rip), %ymm0, %ymm1  /* LCPI0_1(%rip) */
	QUAD $0xfffffe0c0de4f5c5                   // vpmulhuw     $-500(%rip), %ymm1, %ymm1  /* LCPI0_2(%rip) */
	QUAD $0xfffffe2405dbfdc5                   // vpand        $-476(%rip), %ymm0, %ymm0  /* LCPI0_3(%rip) */
	LONG $0xf071edc5; BYTE $0x08               // vpsllw       $8, %ymm0, %ymm2
	LONG $0xf071fdc5; BYTE $0x04               // vpsllw       $4, %ymm0, %ymm0
	LONG $0x0e7de3c4; WORD $0xaac2             // vpblendw     $170, %ymm2, %ymm0, %ymm0
	LONG $0xc1ebfdc5                           // vpor         %ymm1, %ymm0, %ymm0
	QUAD $0xfffffe280d6ffec5                   // vmovdqu      $-472(%rip), %ymm1  /* LCPI0_4(%rip) */
	LONG $0xc864f5c5                           // vpcmpgtb     %ymm0, %ymm1, %ymm1
	LONG $0x6f7ec1c4; BYTE $0x12               // vmovdqu      (%r10), %ymm2
	QUAD $0xfffffe371dd8fdc5                   // vpsubusb     $-457(%rip), %ymm0, %ymm3  /* LCPI0_5(%rip) */
	QUAD $0xfffffe4f0ddbf5c5                   // vpand        $-433(%rip), %ymm1, %ymm1  /* LCPI0_6(%rip) */
	LONG $0xcbebf5c5                           // vpor         %ymm3, %ymm1, %ymm1
	LONG $0x006de2c4; BYTE $0xc9               // vpshufb      %ymm1, %ymm2, %ymm1
	LONG $0xc0fcf5c5                           // vpaddb       %ymm0, %ymm1, %ymm0
	LONG $0x7f7ec1c4; BYTE $0x06               // vmovdqu      %ymm0, (%r14)
	ADDQ $32, R14
	ADDQ $24, R12

LBB0_10:
	CMPQ R12, R9
	JE   LBB0_25
	LEAQ -4(R9), R10
	CMPQ R12, R10
	JA   LBB0_14

LBB0_12:
	MOVL    0(R12), SI
	BSWAPL  SI
	MOVQ    SI, R15
	SHRQ    $26, R15
	MOVL    SI, CX
	SHRL    $20, CX
	ANDL    $63, CX
	MOVL    SI, BX
	SHRL    $14, BX
	ANDL    $63, BX
	SHRL    $8, SI
	ANDL    $63, SI
	ADDQ    $3, R12
	MOVBLZX 0(R11)(R15*1), AX
	MOVB    AX, 0(R14)
	MOVBLZX 0(R11)(CX*1), AX
	MOVB    AX, 1(R14)
	MOVBLZX 0(R11)(BX*1), AX
	MOVB    AX, 2(R14)
	MOVBLZX 0(R11)(SI*1), AX
	MOVB    AX, 3(R14)
	ADDQ    $4, R14
	CMPQ    R12, R10
	JBE     LBB0_12

LBB0_14:
	SUBQ    R12, R9
	MOVBLZX 0(R12), R10
	CMPQ    R9, $1
	JE      LBB0_21
	MOVQ    R10, SI
	SHLQ    $16, SI
	CMPQ    R9, $2
	JE      LBB0_18
	CMPQ    R9, $3
	JNE     LBB0_25
	MOVBLZX 2(R12), DX
	ORL     DX, SI
	MOVBLZX 1(R12), AX
	SHLL    $8, AX
	ORL     SI, AX
	SHRQ    $2, R10
	MOVB    0(R11)(R10*1), CX
	MOVB    CX, 0(R14)
	MOVL    AX, CX
	SHRL    $12, CX
	ANDL    $63, CX
	MOVB    0(R11)(CX*1), CX
	MOVB    CX, 1(R14)
	SHRL    $6, AX
	ANDL    $63, AX
	MOVB    0(R11)(AX*1), AX
	MOVB    AX, 2(R14)
	ANDL    $63, DX
	MOVB    0(R11)(DX*1), AX
	MOVB    AX, 3(R14)
	JMP     LBB0_24

LBB0_4:
	MOVQ R8, R14
	LEAQ -24(R9), SI
	CMPQ R12, SI
	JBE  LBB0_8
	JMP  LBB0_10

LBB0_18:
	MOVBLZX 1(R12), AX
	MOVL    AX, CX
	SHLL    $8, CX
	ORL     SI, CX
	SHRQ    $2, R10
	MOVB    0(R11)(R10*1), BX
	MOVB    BX, 0(R14)
	SHRL    $12, CX
	ANDL    $63, CX
	MOVB    0(R11)(CX*1), CX
	MOVB    CX, 1(R14)
	ANDL    $15, AX
	MOVB    0(R11)(AX*4), AX
	MOVB    AX, 2(R14)
	TESTB   $2, DX
	JNE     LBB0_19
	MOVB    $61, 3(R14)
	JMP     LBB0_24

LBB0_21:
	MOVQ  R10, AX
	SHRQ  $2, AX
	MOVB  0(R11)(AX*1), AX
	MOVB  AX, 0(R14)
	SHLL  $4, R10
	ANDL  $48, R10
	MOVB  0(R11)(R10*1), AX
	MOVB  AX, 1(R14)
	TESTB $2, DX
	JNE   LBB0_22
	MOVW  $15677, 2(R14)

LBB0_24:
	ADDQ $4, R14
	JMP  LBB0_25

LBB0_19:
	ADDQ $3, R14
	JMP  LBB0_25

LBB0_22:
	ADDQ $2, R14

LBB0_25:
	SUBQ R8, R14
	ADDQ R14, 8(DI)

LBB0_26:
	BYTE $0x5b               // popq         %rbx
	WORD $0x5c41             // popq         %r12
	WORD $0x5e41             // popq         %r14
	WORD $0x5f41             // popq         %r15
	BYTE $0x5d               // popq         %rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	RET

LCPI1_0:
	QUAD $0x0f0f0f0f0f0f0f0f; QUAD $0x0f0f0f0f0f0f0f0f // .space 16, '\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f'
	QUAD $0x0f0f0f0f0f0f0f0f; QUAD $0x0f0f0f0f0f0f0f0f // .space 16, '\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f'

LCPI1_1:
	BYTE $0x01 // .byte 1
	BYTE $0x02 // .byte 2
	BYTE $0x04 // .byte 4
	BYTE $0x08 // .byte 8
	BYTE $0x10 // .byte 16
	BYTE $0x20 // .byte 32
	BYTE $0x40 // .byte 64
	BYTE $0x80 // .byte 128
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x01 // .byte 1
	BYTE $0x02 // .byte 2
	BYTE $0x04 // .byte 4
	BYTE $0x08 // .byte 8
	BYTE $0x10 // .byte 16
	BYTE $0x20 // .byte 32
	BYTE $0x40 // .byte 64
	BYTE $0x80 // .byte 128
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0

LCPI1_2:
	QUAD $0x3f3f3f3f3f3f3f3f; QUAD $0x3f3f3f3f3f3f3f3f // .space 16, '????????????????'
	QUAD $0x3f3f3f3f3f3f3f3f; QUAD $0x3f3f3f3f3f3f3f3f // .space 16, '????????????????'

LCPI1_3:
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1

LCPI1_4:
	WORD $0x1000 // .word 4096
	WORD $0x0001 // .word 1
	WORD $0x1000 // .word 4096
	WORD $0x0001 // .word 1
	WORD $0x1000 // .word 4096
	WORD $0x0001 // .word 1
	WORD $0x1000 // .word 4096
	WORD $0x0001 // .word 1
	WORD $0x1000 // .word 4096
	WORD $0x0001 // .word 1
	WORD $0x1000 // .word 4096
	WORD $0x0001 // .word 1
	WORD $0x1000 // .word 4096
	WORD $0x0001 // .word 1
	WORD $0x1000 // .word 4096
	WORD $0x0001 // .word 1

LCPI1_6:
	BYTE $0x02 // .byte 2
	BYTE $0x01 // .byte 1
	BYTE $0x00 // .byte 0
	BYTE $0x06 // .byte 6
	BYTE $0x05 // .byte 5
	BYTE $0x04 // .byte 4
	BYTE $0x0a // .byte 10
	BYTE $0x09 // .byte 9
	BYTE $0x08 // .byte 8
	BYTE $0x0e // .byte 14
	BYTE $0x0d // .byte 13
	BYTE $0x0c // .byte 12
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x05 // .byte 5
	BYTE $0x04 // .byte 4
	BYTE $0x0a // .byte 10
	BYTE $0x09 // .byte 9
	BYTE $0x08 // .byte 8
	BYTE $0x0e // .byte 14
	BYTE $0x0d // .byte 13
	BYTE $0x0c // .byte 12
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'

LCPI1_5:
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x02 // .byte 2
	BYTE $0x01 // .byte 1
	BYTE $0x00 // .byte 0
	BYTE $0x06 // .byte 6

_b64decode:
	BYTE  $0x55                                 // pushq        %rbp
	WORD  $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	WORD  $0x5741                               // pushq        %r15
	WORD  $0x5641                               // pushq        %r14
	WORD  $0x5541                               // pushq        %r13
	WORD  $0x5441                               // pushq        %r12
	BYTE  $0x53                                 // pushq        %rbx
	SUBQ  $96, SP
	TESTQ DX, DX
	JE    LBB1_1
	MOVQ  0(DI), AX
	MOVQ  8(DI), R9
	ADDQ  AX, R9
	MOVQ  DI, -88(BP)
	ADDQ  16(DI), AX
	MOVQ  AX, -64(BP)
	MOVQ  SI, BX
	LEAQ  0(SI)(DX*1), R10
	TESTB $1, CX
	MOVL  CX, DI
	LONG  $0x4f058d48; WORD $0x000a; BYTE $0x00 // leaq         $2639(%rip), %rax  /* _VecDecodeCharsetStd(%rip) */
	LONG  $0xc81d8d4c; WORD $0x000b; BYTE $0x00 // leaq         $3016(%rip), %r11  /* _VecDecodeCharsetURL(%rip) */
	LONG  $0xd8440f4c                           // cmoveq       %rax, %r11
	LONG  $0xbd0d8d48; WORD $0x0009; BYTE $0x00 // leaq         $2493(%rip), %rcx  /* _VecDecodeTableStd(%rip) */
	LONG  $0x36058d48; WORD $0x000b; BYTE $0x00 // leaq         $2870(%rip), %rax  /* _VecDecodeTableURL(%rip) */
	LONG  $0xc1440f48                           // cmoveq       %rcx, %rax
	MOVL  DI, -44(BP)
	TESTB $4, DI
	MOVQ  SI, -80(BP)
	JE    LBB1_3
	LEAQ  -32(BX)(DX*1), R15
	MOVQ  BX, DX
	MOVQ  R9, CX
	MOVQ  BX, SI
	CMPQ  R15, BX
	JB    LBB1_20
	LONG  $0x006ffec5                           // vmovdqu      (%rax), %ymm0
	LONG  $0x486ffec5; BYTE $0x20               // vmovdqu      $32(%rax), %ymm1
	LONG  $0x506ffec5; BYTE $0x40               // vmovdqu      $64(%rax), %ymm2
	LONG  $0x586ffec5; BYTE $0x60               // vmovdqu      $96(%rax), %ymm3
	MOVQ  R9, AX
	MOVQ  -64(BP), CX
	LEAQ  -32(CX), R8
	LEAQ  -1(R10), R12
	QUAD  $0xfffffe7e256ffec5                   // vmovdqu      $-386(%rip), %ymm4  /* LCPI1_0(%rip) */
	QUAD  $0xfffffe962d6ffec5                   // vmovdqu      $-362(%rip), %ymm5  /* LCPI1_1(%rip) */
	LONG  $0xf6efc9c5                           // vpxor        %xmm6, %xmm6, %xmm6
	QUAD  $0xfffffeca056f7ec5                   // vmovdqu      $-310(%rip), %ymm8  /* LCPI1_3(%rip) */
	QUAD  $0xfffffee20d6f7ec5                   // vmovdqu      $-286(%rip), %ymm9  /* LCPI1_4(%rip) */
	QUAD  $0xffffff1a156f7ac5                   // vmovdqu      $-230(%rip), %xmm10  /* LCPI1_5(%rip) */
	QUAD  $0xfffffef21d6f7ec5                   // vmovdqu      $-270(%rip), %ymm11  /* LCPI1_6(%rip) */
	MOVQ  $-4294967296, R13
	MOVQ  -80(BP), CX
	MOVQ  CX, BX
	MOVQ  CX, SI
	MOVQ  R9, DI
	JMP   LBB1_6

LBB1_1:
	XORL AX, AX
	JMP  LBB1_192

LBB1_32:
	INCQ BX

LBB1_28:
	SUBQ SI, BX
	JNE  LBB1_29
	MOVQ SI, BX
	CMPQ R15, SI
	JB   LBB1_19

LBB1_6:
	LONG $0x266f7ec5               // vmovdqu      (%rsi), %ymm12
	LONG $0x7215c1c4; WORD $0x04d4 // vpsrld       $4, %ymm12, %ymm13
	LONG $0xecdb15c5               // vpand        %ymm4, %ymm13, %ymm13
	LONG $0xf4db1dc5               // vpand        %ymm4, %ymm12, %ymm14
	LONG $0x007542c4; BYTE $0xf6   // vpshufb      %ymm14, %ymm1, %ymm14
	LONG $0x005542c4; BYTE $0xfd   // vpshufb      %ymm13, %ymm5, %ymm15
	LONG $0xdb0541c4; BYTE $0xf6   // vpand        %ymm14, %ymm15, %ymm14
	LONG $0xf6740dc5               // vpcmpeqb     %ymm6, %ymm14, %ymm14
	LONG $0xd77dc1c4; BYTE $0xc6   // vpmovmskb    %ymm14, %eax
	ORQ  R13, AX
	BSFQ AX, AX
	CMPL AX, $31
	JA   LBB1_43
	XORL DX, DX
	XORL AX, AX
	CMPQ R10, BX
	JBE  LBB1_17
	XORL DX, DX

LBB1_9:
	MOVBLZX 0(BX), CX
	CMPQ    CX, $10
	JE      LBB1_13
	CMPB    CX, $13
	JE      LBB1_13
	MOVBLZX 0(R11)(CX*1), CX
	CMPL    CX, $255
	JE      LBB1_15
	INCL    AX
	SHLL    $6, DX
	ORL     CX, DX

LBB1_13:
	INCQ BX
	CMPQ BX, R10
	JAE  LBB1_15
	CMPL AX, $4
	JL   LBB1_9

LBB1_15:
	CMPL AX, $1
	JE   LBB1_28
	CMPL AX, $3
	JG   LBB1_36

LBB1_17:
	CMPQ BX, R10
	JE   LBB1_18
	CMPL AX, $3
	JNE  LBB1_30
	CMPB 0(BX), $61
	LEAQ 1(BX), BX
	JNE  LBB1_28

LBB1_34:
	CMPQ BX, R10
	JB   LBB1_28
	JMP  LBB1_35

LBB1_43:
	LONG $0x007d42c4; BYTE $0xed   // vpshufb      %ymm13, %ymm0, %ymm13
	LONG $0xf2741dc5               // vpcmpeqb     %ymm2, %ymm12, %ymm14
	LONG $0x4c1563c4; WORD $0xe0eb // vpblendvb    %ymm14, %ymm3, %ymm13, %ymm13
	LONG $0xfc1541c4; BYTE $0xe4   // vpaddb       %ymm12, %ymm13, %ymm12
	QUAD $0xfffffd9225db1dc5       // vpand        $-622(%rip), %ymm12, %ymm12  /* LCPI1_2(%rip) */
	LONG $0x041d42c4; BYTE $0xe0   // vpmaddubsw   %ymm8, %ymm12, %ymm12
	LONG $0xf51d41c4; BYTE $0xe1   // vpmaddwd     %ymm9, %ymm12, %ymm12
	LONG $0x397d63c4; WORD $0x01e7 // vextracti128 $1, %ymm12, %xmm7
	LONG $0x0041c2c4; BYTE $0xfa   // vpshufb      %xmm10, %xmm7, %xmm7
	LONG $0x001d42c4; BYTE $0xe3   // vpshufb      %ymm11, %ymm12, %ymm12
	LONG $0x021de3c4; WORD $0x08ff // vpblendd     $8, %ymm7, %ymm12, %ymm7
	LONG $0x024563c4; WORD $0xc0e6 // vpblendd     $192, %ymm6, %ymm7, %ymm12
	CMPQ R8, DI
	JAE  LBB1_44
	LONG $0x277f7ac5               // vmovdqu      %xmm12, (%rdi)
	LONG $0x397d63c4; WORD $0x01e7 // vextracti128 $1, %ymm12, %xmm7
	LONG $0x7fd6f9c5; BYTE $0x10   // vmovq        %xmm7, $16(%rdi)
	JMP  LBB1_46

LBB1_44:
	LONG $0x277f7ec5 // vmovdqu      %ymm12, (%rdi)

LBB1_46:
	ADDQ $32, BX
	ADDQ $24, DI
	JMP  LBB1_47

LBB1_18:
	MOVQ  R10, BX
	TESTB $2, -44(BP)
	JE    LBB1_28

LBB1_35:
	MOVB    $4, CX
	SUBB    AX, CX
	MOVBLZX CX, CX
	ADDL    CX, CX
	LEAL    0(CX)(CX*2), CX
	SHLL    CX, DX

LBB1_36:
	CMPL AX, $2
	JE   LBB1_41
	CMPL AX, $3
	JE   LBB1_40
	CMPL AX, $4
	MOVQ DI, CX
	JNE  LBB1_42
	MOVB DX, 2(CX)

LBB1_40:
	MOVQ DI, CX
	MOVB DH, 1(DI)

LBB1_41:
	SHRL $16, DX
	MOVQ DI, CX
	MOVB DX, 0(DI)

LBB1_42:
	WORD $0x9848          // cltq
	LEAQ -1(CX)(AX*1), DI

LBB1_47:
	MOVQ BX, SI
	MOVQ SI, BX
	CMPQ R15, SI
	JAE  LBB1_6
	JMP  LBB1_19

LBB1_30:
	CMPQ BX, R12
	JAE  LBB1_28
	CMPB 0(BX), $61
	JNE  LBB1_32
	CMPB 1(BX), $61
	LEAQ 2(BX), BX
	JNE  LBB1_28
	JMP  LBB1_34

LBB1_19:
	MOVQ SI, DX
	MOVQ DI, CX
	JMP  LBB1_20

LBB1_3:
	MOVQ BX, DX
	MOVQ R9, CX
	MOVQ BX, SI

LBB1_20:
	MOVQ -64(BP), AX
	ADDQ $-8, AX
	MOVQ AX, -136(BP)
	CMPQ AX, CX
	MOVQ CX, AX
	MOVQ R11, -72(BP)
	MOVQ R9, -120(BP)
	JB   LBB1_50
	LEAQ -8(R10), CX
	MOVQ CX, -128(BP)
	CMPQ CX, DX
	JB   LBB1_50
	LEAQ -1(R10), CX
	MOVQ CX, -112(BP)
	MOVQ R10, -96(BP)

LBB1_23:
	MOVQ    SI, -104(BP)
	MOVQ    AX, -56(BP)
	MOVBQSX 0(DX), CX
	MOVBLZX 0(R11)(CX*1), R13
	MOVBQSX 1(DX), AX
	MOVBLZX 0(R11)(AX*1), R15
	MOVBQSX 2(DX), AX
	MOVBLZX 0(R11)(AX*1), R14
	MOVBQSX 3(DX), AX
	MOVBLZX 0(R11)(AX*1), AX
	MOVBQSX 4(DX), SI
	MOVBLZX 0(R11)(SI*1), R8
	MOVBQSX 5(DX), SI
	MOVBLZX 0(R11)(SI*1), R10
	MOVBQSX 6(DX), BX
	MOVBLZX 0(R11)(BX*1), BX
	MOVL    R15, DI
	ORL     R13, DI
	MOVL    AX, R9
	ORL     R14, R9
	ORL     DI, R9
	MOVL    R10, DI
	ORL     R8, DI
	MOVQ    R11, SI
	MOVL    BX, R11
	ORL     DI, R11
	MOVBQSX 7(DX), DI
	MOVBLZX 0(SI)(DI*1), R12
	ORL     R9, R11
	MOVL    R12, DI
	ORL     R11, DI
	CMPB    DI, $-1
	JE      LBB1_24
	SHLQ    $58, R13
	SHLQ    $52, R15
	ORQ     R13, R15
	SHLQ    $46, R14
	SHLQ    $40, AX
	ORQ     R14, AX
	ORQ     R15, AX
	SHLQ    $34, R8
	SHLQ    $28, R10
	ORQ     R8, R10
	SHLQ    $22, BX
	ORQ     R10, BX
	ORQ     AX, BX
	SHLQ    $16, R12
	ORQ     BX, R12
	BSWAPQ  R12
	MOVQ    -56(BP), AX
	MOVQ    R12, 0(AX)
	ADDQ    $8, DX
	ADDQ    $6, AX
	MOVQ    DX, SI
	MOVQ    -72(BP), R11
	MOVQ    -96(BP), R10
	CMPQ    -136(BP), AX
	JAE     LBB1_124
	JMP     LBB1_49

LBB1_24:
	XORL AX, AX
	MOVQ -96(BP), R10
	CMPQ R10, DX
	JBE  LBB1_25
	INCQ DX
	XORL BX, BX
	XORL AX, AX
	MOVQ -72(BP), R11
	MOVQ -104(BP), SI
	CMPB CX, $10
	JE   LBB1_96

LBB1_93:
	CMPB    CX, $13
	JE      LBB1_96
	MOVBLZX CX, CX
	MOVBLZX 0(R11)(CX*1), CX
	CMPL    CX, $255
	JE      LBB1_99
	INCL    BX
	SHLL    $6, AX
	ORL     CX, AX

LBB1_96:
	CMPQ    DX, R10
	JAE     LBB1_100
	CMPL    BX, $3
	JG      LBB1_100
	MOVBLZX 0(DX), CX
	INCQ    DX
	CMPB    CX, $10
	JNE     LBB1_93
	JMP     LBB1_96

LBB1_25:
	XORL BX, BX
	MOVQ -72(BP), R11
	MOVQ -104(BP), SI

LBB1_102:
	CMPQ DX, R10
	JE   LBB1_103
	CMPL BX, $3
	JNE  LBB1_108
	CMPB 0(DX), $61
	LEAQ 1(DX), DX
	JE   LBB1_112
	JMP  LBB1_106

LBB1_103:
	MOVQ  R10, DX
	TESTB $2, -44(BP)
	JNE   LBB1_113
	JMP   LBB1_106

LBB1_108:
	CMPQ DX, -112(BP)
	JAE  LBB1_106
	CMPB 0(DX), $61
	JNE  LBB1_110
	CMPB 1(DX), $61
	LEAQ 2(DX), DX
	JNE  LBB1_106

LBB1_112:
	CMPQ DX, R10
	JB   LBB1_106

LBB1_113:
	MOVB    $4, CX
	SUBB    BX, CX
	MOVBLZX CX, CX
	ADDL    CX, CX
	LEAL    0(CX)(CX*2), CX
	SHLL    CX, AX
	JMP     LBB1_114

LBB1_99:
	DECQ DX

LBB1_100:
	CMPL BX, $1
	JNE  LBB1_101

LBB1_106:
	SUBQ SI, DX
	JNE  LBB1_121

LBB1_107:
	MOVQ -56(BP), AX
	CMPQ -136(BP), AX
	JAE  LBB1_124
	JMP  LBB1_49

LBB1_101:
	CMPL BX, $3
	JLE  LBB1_102

LBB1_114:
	CMPL BX, $2
	JE   LBB1_119
	CMPL BX, $3
	JE   LBB1_118
	CMPL BX, $4
	MOVQ -56(BP), CX
	JNE  LBB1_120
	MOVB AX, 2(CX)

LBB1_118:
	MOVQ -56(BP), CX
	MOVB AH, 1(CX)

LBB1_119:
	SHRL $16, AX
	MOVQ -56(BP), CX
	MOVB AX, 0(CX)

LBB1_120:
	MOVLQSX BX, AX
	LEAQ    -1(CX)(AX*1), AX
	MOVQ    DX, SI
	CMPQ    -136(BP), AX
	JB      LBB1_49

LBB1_124:
	MOVQ SI, DX
	CMPQ -128(BP), SI
	JAE  LBB1_23
	JMP  LBB1_49

LBB1_110:
	INCQ DX
	SUBQ SI, DX
	JE   LBB1_107

LBB1_121:
	MOVQ -80(BP), AX
	SUBQ SI, AX
	SUBQ DX, AX
	JMP  LBB1_192

LBB1_49:
	MOVQ SI, DX

LBB1_50:
	MOVQ  SI, R8
	NEGQ  R8
	MOVQ  -64(BP), CX
	ADDQ  $-4, CX
	MOVQ  CX, -64(BP)
	CMPQ  CX, AX
	JB    LBB1_162
	LEAQ  -4(R10), R15
	CMPQ  R15, DX
	JB    LBB1_162
	LEAQ  -1(R10), CX
	MOVQ  CX, -56(BP)
	TESTB $2, -44(BP)
	JNE   LBB1_125
	MOVQ  DX, BX

LBB1_54:
	MOVQ    SI, R12
	MOVQ    AX, R9
	MOVBQSX 0(BX), DX
	MOVBLZX 0(R11)(DX*1), R13
	MOVBQSX 1(BX), AX
	MOVBLZX 0(R11)(AX*1), DI
	MOVBQSX 2(BX), SI
	MOVBLZX 0(R11)(SI*1), R14
	MOVBQSX 3(BX), SI
	MOVBLZX 0(R11)(SI*1), SI
	MOVL    DI, AX
	ORL     R13, AX
	MOVL    R14, CX
	ORL     SI, CX
	ORL     AX, CX
	CMPB    CX, $-1
	JE      LBB1_56
	SHLL    $26, R13
	SHLL    $20, DI
	ORL     R13, DI
	SHLL    $14, R14
	SHLL    $8, SI
	ORL     R14, SI
	ORL     DI, SI
	BSWAPL  SI
	MOVQ    R9, AX
	MOVL    SI, 0(R9)
	ADDQ    $4, BX
	ADDQ    $3, AX

LBB1_88:
	MOVQ BX, SI
	JMP  LBB1_89

LBB1_56:
	CMPQ R10, BX
	JBE  LBB1_57
	INCQ BX
	XORL AX, AX
	XORL DI, DI
	MOVQ R12, SI
	CMPB DX, $10
	JE   LBB1_63

LBB1_60:
	CMPB    DX, $13
	JE      LBB1_63
	MOVBLZX DX, CX
	MOVBLZX 0(R11)(CX*1), CX
	CMPL    CX, $255
	JE      LBB1_66
	INCL    AX
	SHLL    $6, DI
	ORL     CX, DI

LBB1_63:
	CMPQ    BX, R10
	JAE     LBB1_67
	CMPL    AX, $3
	JG      LBB1_67
	MOVBLZX 0(BX), DX
	INCQ    BX
	CMPB    DX, $10
	JNE     LBB1_60
	JMP     LBB1_63

LBB1_57:
	XORL DI, DI
	XORL AX, AX
	MOVQ R12, SI
	JMP  LBB1_69

LBB1_66:
	DECQ BX

LBB1_67:
	CMPL AX, $1
	JE   LBB1_74
	CMPL AX, $3
	JG   LBB1_81

LBB1_69:
	MOVQ R10, DX
	CMPQ BX, R10
	JE   LBB1_75
	CMPL AX, $3
	JNE  LBB1_71
	CMPB 0(BX), $61
	LEAQ 1(BX), BX
	MOVQ BX, DX
	JNE  LBB1_75

LBB1_79:
	CMPQ    BX, R10
	JB      LBB1_74
	MOVB    $4, CX
	SUBB    AX, CX
	MOVBLZX CX, CX
	ADDL    CX, CX
	LEAL    0(CX)(CX*2), CX
	SHLL    CX, DI

LBB1_81:
	CMPL AX, $2
	JE   LBB1_86
	CMPL AX, $3
	JE   LBB1_85
	CMPL AX, $4
	MOVQ R9, CX
	JNE  LBB1_87
	MOVL DI, DX
	MOVB DX, 2(CX)

LBB1_85:
	MOVQ R9, CX
	MOVL DI, DX
	MOVB DH, 1(CX)

LBB1_86:
	SHRL $16, DI
	MOVQ R9, CX
	MOVB DI, 0(R9)

LBB1_87:
	WORD $0x9848          // cltq
	LEAQ -1(CX)(AX*1), AX
	JMP  LBB1_88

LBB1_71:
	CMPQ BX, -56(BP)
	JAE  LBB1_74
	CMPB 0(BX), $61
	JNE  LBB1_73
	CMPB 1(BX), $61
	LEAQ 2(BX), BX
	MOVQ BX, DX
	JE   LBB1_79
	JMP  LBB1_75

LBB1_73:
	INCQ BX

LBB1_74:
	MOVQ BX, DX

LBB1_75:
	SUBQ SI, DX
	MOVQ R9, AX
	JNE  LBB1_146

LBB1_89:
	MOVQ SI, R8
	NEGQ R8
	CMPQ -64(BP), AX
	JB   LBB1_161
	MOVQ SI, BX
	CMPQ R15, SI
	JAE  LBB1_54
	JMP  LBB1_161

LBB1_125:
	MOVQ    SI, R13
	MOVQ    AX, R14
	MOVBQSX 0(DX), SI
	MOVQ    R11, CX
	MOVBLZX 0(R11)(SI*1), R11
	MOVBQSX 1(DX), AX
	MOVBLZX 0(CX)(AX*1), BX
	MOVBQSX 2(DX), DI
	MOVBLZX 0(CX)(DI*1), R9
	MOVBQSX 3(DX), DI
	MOVBLZX 0(CX)(DI*1), DI
	MOVL    BX, AX
	ORL     R11, AX
	MOVL    R9, CX
	ORL     DI, CX
	ORL     AX, CX
	CMPB    CX, $-1
	JE      LBB1_126
	SHLL    $26, R11
	SHLL    $20, BX
	ORL     R11, BX
	SHLL    $14, R9
	SHLL    $8, DI
	ORL     R9, DI
	ORL     BX, DI
	BSWAPL  DI
	MOVQ    R14, AX
	MOVL    DI, 0(R14)
	ADDQ    $4, DX
	ADDQ    $3, AX
	MOVQ    DX, SI
	MOVQ    -72(BP), R11
	JMP     LBB1_159

LBB1_126:
	XORL BX, BX
	CMPQ R10, DX
	JBE  LBB1_127
	INCQ DX
	XORL AX, AX
	XORL BX, BX
	MOVQ -72(BP), R11
	CMPB SI, $10
	JE   LBB1_133

LBB1_130:
	CMPB    SI, $13
	JE      LBB1_133
	MOVBLZX SI, CX
	MOVBLZX 0(R11)(CX*1), CX
	CMPL    CX, $255
	JE      LBB1_136
	INCL    AX
	SHLL    $6, BX
	ORL     CX, BX

LBB1_133:
	CMPQ    DX, R10
	JAE     LBB1_137
	CMPL    AX, $3
	JG      LBB1_137
	MOVBLZX 0(DX), SI
	INCQ    DX
	CMPB    SI, $10
	JNE     LBB1_130
	JMP     LBB1_133

LBB1_127:
	XORL AX, AX
	MOVQ -72(BP), R11
	JMP  LBB1_139

LBB1_136:
	DECQ DX

LBB1_137:
	CMPL AX, $1
	JE   LBB1_145
	CMPL AX, $3
	JG   LBB1_151

LBB1_139:
	MOVQ R10, SI
	CMPQ DX, R10
	JE   LBB1_150
	CMPL AX, $3
	JNE  LBB1_142
	LEAQ 1(DX), SI
	CMPB 0(DX), $61
	MOVQ SI, DX
	JNE  LBB1_145

LBB1_149:
	MOVQ SI, DX
	CMPQ SI, R10
	JB   LBB1_145

LBB1_150:
	MOVB    $4, CX
	SUBB    AX, CX
	MOVBLZX CX, CX
	ADDL    CX, CX
	LEAL    0(CX)(CX*2), CX
	SHLL    CX, BX
	MOVQ    SI, DX

LBB1_151:
	CMPL AX, $2
	JE   LBB1_156
	CMPL AX, $3
	JE   LBB1_155
	CMPL AX, $4
	MOVQ R14, CX
	JNE  LBB1_157
	MOVB BX, 2(CX)

LBB1_155:
	MOVQ R14, CX
	MOVB BH, 1(CX)

LBB1_156:
	SHRL $16, BX
	MOVQ R14, CX
	MOVB BX, 0(R14)

LBB1_157:
	WORD $0x9848          // cltq
	LEAQ -1(CX)(AX*1), AX
	MOVQ DX, SI
	JMP  LBB1_159

LBB1_142:
	CMPQ DX, -56(BP)
	JAE  LBB1_145
	CMPB 0(DX), $61
	JNE  LBB1_144
	LEAQ 2(DX), SI
	CMPB 1(DX), $61
	MOVQ SI, DX
	JE   LBB1_149
	JMP  LBB1_145

LBB1_144:
	INCQ DX

LBB1_145:
	MOVQ R13, SI
	SUBQ R13, DX
	MOVQ R14, AX
	JNE  LBB1_146

LBB1_159:
	MOVQ SI, R8
	NEGQ R8
	CMPQ -64(BP), AX
	JB   LBB1_161
	MOVQ SI, DX
	CMPQ R15, SI
	JAE  LBB1_125

LBB1_161:
	MOVQ SI, DX

LBB1_162:
	CMPQ R10, DX
	JBE  LBB1_163
	MOVQ AX, DI
	XORL AX, AX
	XORL BX, BX

LBB1_165:
	MOVBLZX 0(DX), CX
	CMPQ    CX, $10
	JE      LBB1_169
	CMPB    CX, $13
	JE      LBB1_169
	MOVBLZX 0(R11)(CX*1), CX
	CMPL    CX, $255
	JE      LBB1_171
	INCL    AX
	SHLL    $6, BX
	ORL     CX, BX

LBB1_169:
	INCQ DX
	CMPQ DX, R10
	JAE  LBB1_171
	CMPL AX, $4
	JL   LBB1_165

LBB1_171:
	CMPL AX, $1
	JNE  LBB1_172

LBB1_177:
	SUBQ SI, DX
	MOVQ -88(BP), CX
	MOVQ DI, AX
	JE   LBB1_191

LBB1_146:
	ADDQ -80(BP), R8
	SUBQ DX, R8
	MOVQ R8, AX
	JMP  LBB1_192

LBB1_163:
	MOVQ -88(BP), CX
	JMP  LBB1_191

LBB1_172:
	CMPL AX, $3
	JG   LBB1_184
	CMPQ DX, R10
	JE   LBB1_174
	CMPL AX, $3
	JNE  LBB1_178
	CMPB 0(DX), $61
	LEAQ 1(DX), DX
	JNE  LBB1_177
	JMP  LBB1_182

LBB1_29:
	MOVQ -80(BP), AX
	SUBQ SI, AX
	SUBQ BX, AX
	JMP  LBB1_192

LBB1_174:
	MOVQ  R10, DX
	TESTB $2, -44(BP)
	JE    LBB1_177
	JMP   LBB1_183

LBB1_178:
	LEAQ -1(R10), CX
	CMPQ DX, CX
	JAE  LBB1_177
	CMPB 0(DX), $61
	JNE  LBB1_180
	CMPB 1(DX), $61
	LEAQ 2(DX), DX
	JNE  LBB1_177

LBB1_182:
	CMPQ DX, R10
	JB   LBB1_177

LBB1_183:
	MOVB    $4, CX
	SUBB    AX, CX
	MOVBLZX CX, CX
	ADDL    CX, CX
	LEAL    0(CX)(CX*2), CX
	SHLL    CX, BX

LBB1_184:
	MOVQ -88(BP), CX
	CMPL AX, $2
	JE   LBB1_189
	CMPL AX, $3
	JE   LBB1_188
	CMPL AX, $4
	MOVQ DI, DX
	JNE  LBB1_190
	MOVB BX, 2(DX)

LBB1_188:
	MOVQ DI, DX
	MOVB BH, 1(DI)

LBB1_189:
	SHRL $16, BX
	MOVQ DI, DX
	MOVB BX, 0(DI)

LBB1_190:
	WORD $0x9848          // cltq
	LEAQ -1(DX)(AX*1), AX

LBB1_191:
	SUBQ -120(BP), AX
	ADDQ AX, 8(CX)

LBB1_192:
	ADDQ $96, SP
	BYTE $0x5b               // popq         %rbx
	WORD $0x5c41             // popq         %r12
	WORD $0x5d41             // popq         %r13
	WORD $0x5e41             // popq         %r14
	WORD $0x5f41             // popq         %r15
	BYTE $0x5d               // popq         %rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	RET

LBB1_180:
	INCQ DX
	JMP  LBB1_177

_TabEncodeCharsetStd:
	QUAD $0x4847464544434241; QUAD $0x504f4e4d4c4b4a49 // .ascii 16, 'ABCDEFGHIJKLMNOP'
	QUAD $0x5857565554535251; QUAD $0x6665646362615a59 // .ascii 16, 'QRSTUVWXYZabcdef'
	QUAD $0x6e6d6c6b6a696867; QUAD $0x767574737271706f // .ascii 16, 'ghijklmnopqrstuv'
	QUAD $0x333231307a797877; QUAD $0x2f2b393837363534 // .ascii 16, 'wxyz0123456789+/'

_VecEncodeCharsetStd:
	QUAD $0xfcfcfcfcfcfcfc47; QUAD $0x000041f0edfcfcfc // .asciz 16, 'G\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xed\xf0A\x00\x00'
	QUAD $0xfcfcfcfcfcfcfc47; QUAD $0x000041f0edfcfcfc // .asciz 16, 'G\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xed\xf0A\x00\x00'

_TabEncodeCharsetURL:
	QUAD $0x4847464544434241; QUAD $0x504f4e4d4c4b4a49 // .ascii 16, 'ABCDEFGHIJKLMNOP'
	QUAD $0x5857565554535251; QUAD $0x6665646362615a59 // .ascii 16, 'QRSTUVWXYZabcdef'
	QUAD $0x6e6d6c6b6a696867; QUAD $0x767574737271706f // .ascii 16, 'ghijklmnopqrstuv'
	QUAD $0x333231307a797877; QUAD $0x5f2d393837363534 // .ascii 16, 'wxyz0123456789-_'

_VecEncodeCharsetURL:
	QUAD $0xfcfcfcfcfcfcfc47; QUAD $0x00004120effcfcfc // .asciz 16, 'G\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xef A\x00\x00'
	QUAD $0xfcfcfcfcfcfcfc47; QUAD $0x00004120effcfcfc // .asciz 16, 'G\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xef A\x00\x00'

_VecDecodeTableStd:
	QUAD $0xb9b9bfbf04130000; QUAD $0x0000000000000000 // .ascii 16, '\x00\x00\x13\x04\xbf\xbf\xb9\xb9\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0xb9b9bfbf04130000; QUAD $0x0000000000000000 // .ascii 16, '\x00\x00\x13\x04\xbf\xbf\xb9\xb9\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0xf8f8f8f8f8f8f8a8; QUAD $0x5450505054f0f8f8 // .ascii 16, '\xa8\xf8\xf8\xf8\xf8\xf8\xf8\xf8\xf8\xf8\xf0TPPPT'
	QUAD $0xf8f8f8f8f8f8f8a8; QUAD $0x5450505054f0f8f8 // .ascii 16, '\xa8\xf8\xf8\xf8\xf8\xf8\xf8\xf8\xf8\xf8\xf0TPPPT'
	QUAD $0x2f2f2f2f2f2f2f2f; QUAD $0x2f2f2f2f2f2f2f2f // .ascii 16, '////////////////'
	QUAD $0x2f2f2f2f2f2f2f2f; QUAD $0x2f2f2f2f2f2f2f2f // .ascii 16, '////////////////'
	QUAD $0x1010101010101010; QUAD $0x1010101010101010 // .ascii 16, '\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10'
	QUAD $0x1010101010101010; QUAD $0x1010101010101010 // .ascii 16, '\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10'

_VecDecodeCharsetStd:
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0x3fffffff3effffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff>\xff\xff\xff?'
	QUAD $0x3b3a393837363534; QUAD $0xffffffffffff3d3c // .ascii 16, '456789:;<=\xff\xff\xff\xff\xff\xff'
	QUAD $0x06050403020100ff; QUAD $0x0e0d0c0b0a090807 // .ascii 16, '\xff\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e'
	QUAD $0x161514131211100f; QUAD $0xffffffffff191817 // .ascii 16, '\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\xff\xff\xff\xff\xff'
	QUAD $0x201f1e1d1c1b1aff; QUAD $0x2827262524232221 // .ascii 16, '\xff\x1a\x1b\x1c\x1d\x1e\x1f !"#$%&\'('
	QUAD $0x302f2e2d2c2b2a29; QUAD $0xffffffffff333231 // .ascii 16, ')*+,-./0123\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'

_VecDecodeTableURL:
	QUAD $0xb9b9bfbf04110000; QUAD $0x0000000000000000 // .ascii 16, '\x00\x00\x11\x04\xbf\xbf\xb9\xb9\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0xb9b9bfbf04110000; QUAD $0x0000000000000000 // .ascii 16, '\x00\x00\x11\x04\xbf\xbf\xb9\xb9\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0xf8f8f8f8f8f8f8a8; QUAD $0x7050545050f0f8f8 // .ascii 16, '\xa8\xf8\xf8\xf8\xf8\xf8\xf8\xf8\xf8\xf8\xf0PPTPp'
	QUAD $0xf8f8f8f8f8f8f8a8; QUAD $0x7050545050f0f8f8 // .ascii 16, '\xa8\xf8\xf8\xf8\xf8\xf8\xf8\xf8\xf8\xf8\xf0PPTPp'
	QUAD $0x5f5f5f5f5f5f5f5f; QUAD $0x5f5f5f5f5f5f5f5f // .ascii 16, '________________'
	QUAD $0x5f5f5f5f5f5f5f5f; QUAD $0x5f5f5f5f5f5f5f5f // .ascii 16, '________________'
	QUAD $0xe0e0e0e0e0e0e0e0; QUAD $0xe0e0e0e0e0e0e0e0 // .ascii 16, '\xe0\xe0\xe0\xe0\xe0\xe0\xe0\xe0\xe0\xe0\xe0\xe0\xe0\xe0\xe0\xe0'
	QUAD $0xe0e0e0e0e0e0e0e0; QUAD $0xe0e0e0e0e0e0e0e0 // .ascii 16, '\xe0\xe0\xe0\xe0\xe0\xe0\xe0\xe0\xe0\xe0\xe0\xe0\xe0\xe0\xe0\xe0'

_VecDecodeCharsetURL:
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffff3effffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff>\xff\xff'
	QUAD $0x3b3a393837363534; QUAD $0xffffffffffff3d3c // .ascii 16, '456789:;<=\xff\xff\xff\xff\xff\xff'
	QUAD $0x06050403020100ff; QUAD $0x0e0d0c0b0a090807 // .ascii 16, '\xff\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e'
	QUAD $0x161514131211100f; QUAD $0x3fffffffff191817 // .ascii 16, '\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\xff\xff\xff\xff?'
	QUAD $0x201f1e1d1c1b1aff; QUAD $0x2827262524232221 // .ascii 16, '\xff\x1a\x1b\x1c\x1d\x1e\x1f !"#$%&\'('
	QUAD $0x302f2e2d2c2b2a29; QUAD $0xffffffffff333231 // .ascii 16, ')*+,-./0123\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'

TEXT Â·__b64decode(SB), NOSPLIT, $0 - 40
	MOVQ out+0(FP), DI
	MOVQ src+8(FP), SI
	MOVQ len+16(FP), DX
	MOVQ mode+24(FP), CX
	CALL Â·__native_entry__+1246(SB) // _b64decode
	MOVQ AX, ret+32(FP)
	RET

TEXT Â·__b64encode(SB), NOSPLIT, $0 - 24
	MOVQ out+0(FP), DI
	MOVQ src+8(FP), SI
	MOVQ mode+16(FP), DX
	LEAQ Â·__native_entry__+237(SB), AX // _b64encode
	JMP  AX
