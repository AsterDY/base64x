// +build !noasm !appengine
// Code generated by asm2asm, DO NOT EDIT.

#include "go_asm.h"
#include "textflag.h"

TEXT Â·___asm2asm_compiled_code__DO_NOT_CALL_THIS_SYMBOL___(SB), NOSPLIT, $0
LCPI0_0:
	BYTE $0x01 // .byte 1
	BYTE $0x00 // .byte 0
	BYTE $0x02 // .byte 2
	BYTE $0x01 // .byte 1
	BYTE $0x04 // .byte 4
	BYTE $0x03 // .byte 3
	BYTE $0x05 // .byte 5
	BYTE $0x04 // .byte 4
	BYTE $0x07 // .byte 7
	BYTE $0x06 // .byte 6
	BYTE $0x08 // .byte 8
	BYTE $0x07 // .byte 7
	BYTE $0x0a // .byte 10
	BYTE $0x09 // .byte 9
	BYTE $0x0b // .byte 11
	BYTE $0x0a // .byte 10
	BYTE $0x01 // .byte 1
	BYTE $0x00 // .byte 0
	BYTE $0x02 // .byte 2
	BYTE $0x01 // .byte 1
	BYTE $0x04 // .byte 4
	BYTE $0x03 // .byte 3
	BYTE $0x05 // .byte 5
	BYTE $0x04 // .byte 4
	BYTE $0x07 // .byte 7
	BYTE $0x06 // .byte 6
	BYTE $0x08 // .byte 8
	BYTE $0x07 // .byte 7
	BYTE $0x0a // .byte 10
	BYTE $0x09 // .byte 9
	BYTE $0x0b // .byte 11
	BYTE $0x0a // .byte 10

LCPI0_1:
	WORD $0xfc00 // .word 64512
	WORD $0x0fc0 // .word 4032
	WORD $0xfc00 // .word 64512
	WORD $0x0fc0 // .word 4032
	WORD $0xfc00 // .word 64512
	WORD $0x0fc0 // .word 4032
	WORD $0xfc00 // .word 64512
	WORD $0x0fc0 // .word 4032
	WORD $0xfc00 // .word 64512
	WORD $0x0fc0 // .word 4032
	WORD $0xfc00 // .word 64512
	WORD $0x0fc0 // .word 4032
	WORD $0xfc00 // .word 64512
	WORD $0x0fc0 // .word 4032
	WORD $0xfc00 // .word 64512
	WORD $0x0fc0 // .word 4032

LCPI0_2:
	WORD $0x0040 // .word 64
	WORD $0x0400 // .word 1024
	WORD $0x0040 // .word 64
	WORD $0x0400 // .word 1024
	WORD $0x0040 // .word 64
	WORD $0x0400 // .word 1024
	WORD $0x0040 // .word 64
	WORD $0x0400 // .word 1024
	WORD $0x0040 // .word 64
	WORD $0x0400 // .word 1024
	WORD $0x0040 // .word 64
	WORD $0x0400 // .word 1024
	WORD $0x0040 // .word 64
	WORD $0x0400 // .word 1024
	WORD $0x0040 // .word 64
	WORD $0x0400 // .word 1024

LCPI0_3:
	WORD $0x03f0 // .word 1008
	WORD $0x003f // .word 63
	WORD $0x03f0 // .word 1008
	WORD $0x003f // .word 63
	WORD $0x03f0 // .word 1008
	WORD $0x003f // .word 63
	WORD $0x03f0 // .word 1008
	WORD $0x003f // .word 63
	WORD $0x03f0 // .word 1008
	WORD $0x003f // .word 63
	WORD $0x03f0 // .word 1008
	WORD $0x003f // .word 63
	WORD $0x03f0 // .word 1008
	WORD $0x003f // .word 63
	WORD $0x03f0 // .word 1008
	WORD $0x003f // .word 63

LCPI0_4:
	QUAD $0x1a1a1a1a1a1a1a1a; QUAD $0x1a1a1a1a1a1a1a1a // .space 16, '\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a'
	QUAD $0x1a1a1a1a1a1a1a1a; QUAD $0x1a1a1a1a1a1a1a1a // .space 16, '\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a'

LCPI0_5:
	QUAD $0x3333333333333333; QUAD $0x3333333333333333 // .space 16, '3333333333333333'
	QUAD $0x3333333333333333; QUAD $0x3333333333333333 // .space 16, '3333333333333333'

LCPI0_6:
	QUAD $0x0d0d0d0d0d0d0d0d; QUAD $0x0d0d0d0d0d0d0d0d // .space 16, '\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r'
	QUAD $0x0d0d0d0d0d0d0d0d; QUAD $0x0d0d0d0d0d0d0d0d // .space 16, '\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r'

_b64encode:
	BYTE  $0x55                                 // pushq        %rbp
	WORD  $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	WORD  $0x5741                               // pushq        %r15
	WORD  $0x5641                               // pushq        %r14
	WORD  $0x5441                               // pushq        %r12
	BYTE  $0x53                                 // pushq        %rbx
	MOVQ  8(SI), R9
	TESTQ R9, R9
	JE    LBB0_26
	MOVQ  0(DI), R8
	ADDQ  8(DI), R8
	MOVQ  0(SI), R12
	ADDQ  R12, R9
	TESTB $1, DX
	LONG  $0x350d8d48; WORD $0x000f; BYTE $0x00 // leaq         $3893(%rip), %rcx  /* _VecEncodeCharsetStd(%rip) */
	LONG  $0x8e158d4c; WORD $0x000f; BYTE $0x00 // leaq         $3982(%rip), %r10  /* _VecEncodeCharsetURL(%rip) */
	LONG  $0xd1440f4c                           // cmoveq       %rcx, %r10
	LONG  $0xe30d8d48; WORD $0x000e; BYTE $0x00 // leaq         $3811(%rip), %rcx  /* _TabEncodeCharsetStd(%rip) */
	LONG  $0x3c1d8d4c; WORD $0x000f; BYTE $0x00 // leaq         $3900(%rip), %r11  /* _TabEncodeCharsetURL(%rip) */
	LONG  $0xd9440f4c                           // cmoveq       %rcx, %r11
	TESTB $4, DX
	JE    LBB0_2
	LEAQ  -28(R9), SI
	CMPQ  R12, SI
	JA    LBB0_4
	LONG  $0x6f7ec1c4; BYTE $0x02               // vmovdqu      (%r10), %ymm0
	QUAD  $0xfffffeb10d6ffec5                   // vmovdqu      $-335(%rip), %ymm1  /* LCPI0_0(%rip) */
	QUAD  $0xfffffec9156ffec5                   // vmovdqu      $-311(%rip), %ymm2  /* LCPI0_1(%rip) */
	QUAD  $0xfffffee11d6ffec5                   // vmovdqu      $-287(%rip), %ymm3  /* LCPI0_2(%rip) */
	QUAD  $0xfffffef9256ffec5                   // vmovdqu      $-263(%rip), %ymm4  /* LCPI0_3(%rip) */
	QUAD  $0xffffff112d6ffec5                   // vmovdqu      $-239(%rip), %ymm5  /* LCPI0_4(%rip) */
	QUAD  $0xffffff29356ffec5                   // vmovdqu      $-215(%rip), %ymm6  /* LCPI0_5(%rip) */
	QUAD  $0xffffff413d6ffec5                   // vmovdqu      $-191(%rip), %ymm7  /* LCPI0_6(%rip) */
	MOVQ  R8, R14

LBB0_6:
	LONG $0x6f7a41c4; WORD $0x2404 // vmovdqu      (%r12), %xmm8
	QUAD $0x010c2444383d43c4       // vinserti128  $1, $12(%r12), %ymm8, %ymm8
	LONG $0x003d62c4; BYTE $0xc1   // vpshufb      %ymm1, %ymm8, %ymm8
	LONG $0xcadb3dc5               // vpand        %ymm2, %ymm8, %ymm9
	LONG $0xcbe435c5               // vpmulhuw     %ymm3, %ymm9, %ymm9
	LONG $0xc4db3dc5               // vpand        %ymm4, %ymm8, %ymm8
	LONG $0x712dc1c4; WORD $0x08f0 // vpsllw       $8, %ymm8, %ymm10
	LONG $0x713dc1c4; WORD $0x04f0 // vpsllw       $4, %ymm8, %ymm8
	LONG $0x0e3d43c4; WORD $0xaac2 // vpblendw     $170, %ymm10, %ymm8, %ymm8
	LONG $0xeb3d41c4; BYTE $0xc1   // vpor         %ymm9, %ymm8, %ymm8
	LONG $0x645541c4; BYTE $0xc8   // vpcmpgtb     %ymm8, %ymm5, %ymm9
	LONG $0xcfdb35c5               // vpand        %ymm7, %ymm9, %ymm9
	LONG $0xd6d83dc5               // vpsubusb     %ymm6, %ymm8, %ymm10
	LONG $0xeb3541c4; BYTE $0xca   // vpor         %ymm10, %ymm9, %ymm9
	LONG $0x007d42c4; BYTE $0xc9   // vpshufb      %ymm9, %ymm0, %ymm9
	LONG $0xfc3541c4; BYTE $0xc0   // vpaddb       %ymm8, %ymm9, %ymm8
	LONG $0x7f7e41c4; BYTE $0x06   // vmovdqu      %ymm8, (%r14)
	ADDQ $32, R14
	ADDQ $24, R12
	CMPQ R12, SI
	JBE  LBB0_6
	JMP  LBB0_7

LBB0_2:
	MOVQ R8, R14

LBB0_7:
	LEAQ -24(R9), SI
	CMPQ R12, SI
	JA   LBB0_10

LBB0_8:
	MOVL DX, SI
	ANDL $4, SI
	JE   LBB0_10
	LONG $0x6f7ac1c4; WORD $0x2404             // vmovdqu      (%r12), %xmm0
	LONG $0x6f7ac1c4; WORD $0x244c; BYTE $0x08 // vmovdqu      $8(%r12), %xmm1
	LONG $0xd973f1c5; BYTE $0x04               // vpsrldq      $4, %xmm1, %xmm1
	LONG $0x387de3c4; WORD $0x01c1             // vinserti128  $1, %xmm1, %ymm0, %ymm0
	QUAD $0xfffddc05007de2c4; BYTE $0xff       // vpshufb      $-548(%rip), %ymm0, %ymm0  /* LCPI0_0(%rip) */
	QUAD $0xfffffdf40ddbfdc5                   // vpand        $-524(%rip), %ymm0, %ymm1  /* LCPI0_1(%rip) */
	QUAD $0xfffffe0c0de4f5c5                   // vpmulhuw     $-500(%rip), %ymm1, %ymm1  /* LCPI0_2(%rip) */
	QUAD $0xfffffe2405dbfdc5                   // vpand        $-476(%rip), %ymm0, %ymm0  /* LCPI0_3(%rip) */
	LONG $0xf071edc5; BYTE $0x08               // vpsllw       $8, %ymm0, %ymm2
	LONG $0xf071fdc5; BYTE $0x04               // vpsllw       $4, %ymm0, %ymm0
	LONG $0x0e7de3c4; WORD $0xaac2             // vpblendw     $170, %ymm2, %ymm0, %ymm0
	LONG $0xc1ebfdc5                           // vpor         %ymm1, %ymm0, %ymm0
	QUAD $0xfffffe280d6ffec5                   // vmovdqu      $-472(%rip), %ymm1  /* LCPI0_4(%rip) */
	LONG $0xc864f5c5                           // vpcmpgtb     %ymm0, %ymm1, %ymm1
	LONG $0x6f7ec1c4; BYTE $0x12               // vmovdqu      (%r10), %ymm2
	QUAD $0xfffffe371dd8fdc5                   // vpsubusb     $-457(%rip), %ymm0, %ymm3  /* LCPI0_5(%rip) */
	QUAD $0xfffffe4f0ddbf5c5                   // vpand        $-433(%rip), %ymm1, %ymm1  /* LCPI0_6(%rip) */
	LONG $0xcbebf5c5                           // vpor         %ymm3, %ymm1, %ymm1
	LONG $0x006de2c4; BYTE $0xc9               // vpshufb      %ymm1, %ymm2, %ymm1
	LONG $0xc0fcf5c5                           // vpaddb       %ymm0, %ymm1, %ymm0
	LONG $0x7f7ec1c4; BYTE $0x06               // vmovdqu      %ymm0, (%r14)
	ADDQ $32, R14
	ADDQ $24, R12

LBB0_10:
	CMPQ R12, R9
	JE   LBB0_25
	LEAQ -4(R9), R10
	CMPQ R12, R10
	JA   LBB0_14

LBB0_12:
	MOVL    0(R12), SI
	BSWAPL  SI
	MOVQ    SI, R15
	SHRQ    $26, R15
	MOVL    SI, CX
	SHRL    $20, CX
	ANDL    $63, CX
	MOVL    SI, BX
	SHRL    $14, BX
	ANDL    $63, BX
	SHRL    $8, SI
	ANDL    $63, SI
	ADDQ    $3, R12
	MOVBLZX 0(R11)(R15*1), AX
	MOVB    AX, 0(R14)
	MOVBLZX 0(R11)(CX*1), AX
	MOVB    AX, 1(R14)
	MOVBLZX 0(R11)(BX*1), AX
	MOVB    AX, 2(R14)
	MOVBLZX 0(R11)(SI*1), AX
	MOVB    AX, 3(R14)
	ADDQ    $4, R14
	CMPQ    R12, R10
	JBE     LBB0_12

LBB0_14:
	SUBQ    R12, R9
	MOVBLZX 0(R12), R10
	CMPQ    R9, $1
	JE      LBB0_21
	MOVQ    R10, SI
	SHLQ    $16, SI
	CMPQ    R9, $2
	JE      LBB0_18
	CMPQ    R9, $3
	JNE     LBB0_25
	MOVBLZX 2(R12), DX
	ORL     DX, SI
	MOVBLZX 1(R12), AX
	SHLL    $8, AX
	ORL     SI, AX
	SHRQ    $2, R10
	MOVB    0(R11)(R10*1), CX
	MOVB    CX, 0(R14)
	MOVL    AX, CX
	SHRL    $12, CX
	ANDL    $63, CX
	MOVB    0(R11)(CX*1), CX
	MOVB    CX, 1(R14)
	SHRL    $6, AX
	ANDL    $63, AX
	MOVB    0(R11)(AX*1), AX
	MOVB    AX, 2(R14)
	ANDL    $63, DX
	MOVB    0(R11)(DX*1), AX
	MOVB    AX, 3(R14)
	JMP     LBB0_24

LBB0_4:
	MOVQ R8, R14
	LEAQ -24(R9), SI
	CMPQ R12, SI
	JBE  LBB0_8
	JMP  LBB0_10

LBB0_18:
	MOVBLZX 1(R12), AX
	MOVL    AX, CX
	SHLL    $8, CX
	ORL     SI, CX
	SHRQ    $2, R10
	MOVB    0(R11)(R10*1), BX
	MOVB    BX, 0(R14)
	SHRL    $12, CX
	ANDL    $63, CX
	MOVB    0(R11)(CX*1), CX
	MOVB    CX, 1(R14)
	ANDL    $15, AX
	MOVB    0(R11)(AX*4), AX
	MOVB    AX, 2(R14)
	TESTB   $2, DX
	JNE     LBB0_19
	MOVB    $61, 3(R14)
	JMP     LBB0_24

LBB0_21:
	MOVQ  R10, AX
	SHRQ  $2, AX
	MOVB  0(R11)(AX*1), AX
	MOVB  AX, 0(R14)
	SHLL  $4, R10
	ANDL  $48, R10
	MOVB  0(R11)(R10*1), AX
	MOVB  AX, 1(R14)
	TESTB $2, DX
	JNE   LBB0_22
	MOVW  $15677, 2(R14)

LBB0_24:
	ADDQ $4, R14
	JMP  LBB0_25

LBB0_19:
	ADDQ $3, R14
	JMP  LBB0_25

LBB0_22:
	ADDQ $2, R14

LBB0_25:
	SUBQ R8, R14
	ADDQ R14, 8(DI)

LBB0_26:
	BYTE $0x5b               // popq         %rbx
	WORD $0x5c41             // popq         %r12
	WORD $0x5e41             // popq         %r14
	WORD $0x5f41             // popq         %r15
	BYTE $0x5d               // popq         %rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	RET

LCPI1_0:
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x13 // .byte 19
	BYTE $0x04 // .byte 4
	BYTE $0xbf // .byte 191
	BYTE $0xbf // .byte 191
	BYTE $0xb9 // .byte 185
	BYTE $0xb9 // .byte 185
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x13 // .byte 19
	BYTE $0x04 // .byte 4
	BYTE $0xbf // .byte 191
	BYTE $0xbf // .byte 191
	BYTE $0xb9 // .byte 185
	BYTE $0xb9 // .byte 185
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0

LCPI1_1:
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x11 // .byte 17
	BYTE $0x04 // .byte 4
	BYTE $0xbf // .byte 191
	BYTE $0xbf // .byte 191
	BYTE $0xb9 // .byte 185
	BYTE $0xb9 // .byte 185
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x11 // .byte 17
	BYTE $0x04 // .byte 4
	BYTE $0xbf // .byte 191
	BYTE $0xbf // .byte 191
	BYTE $0xb9 // .byte 185
	BYTE $0xb9 // .byte 185
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0

LCPI1_2:
	BYTE $0xa8 // .byte 168
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf0 // .byte 240
	BYTE $0x54 // .byte 84
	BYTE $0x50 // .byte 80
	BYTE $0x50 // .byte 80
	BYTE $0x50 // .byte 80
	BYTE $0x54 // .byte 84
	BYTE $0xa8 // .byte 168
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf0 // .byte 240
	BYTE $0x54 // .byte 84
	BYTE $0x50 // .byte 80
	BYTE $0x50 // .byte 80
	BYTE $0x50 // .byte 80
	BYTE $0x54 // .byte 84

LCPI1_3:
	BYTE $0xa8 // .byte 168
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf0 // .byte 240
	BYTE $0x50 // .byte 80
	BYTE $0x50 // .byte 80
	BYTE $0x54 // .byte 84
	BYTE $0x50 // .byte 80
	BYTE $0x70 // .byte 112
	BYTE $0xa8 // .byte 168
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf0 // .byte 240
	BYTE $0x50 // .byte 80
	BYTE $0x50 // .byte 80
	BYTE $0x54 // .byte 84
	BYTE $0x50 // .byte 80
	BYTE $0x70 // .byte 112

LCPI1_4:
	QUAD $0x2f2f2f2f2f2f2f2f; QUAD $0x2f2f2f2f2f2f2f2f // .space 16, '////////////////'
	QUAD $0x2f2f2f2f2f2f2f2f; QUAD $0x2f2f2f2f2f2f2f2f // .space 16, '////////////////'

LCPI1_5:
	QUAD $0x5f5f5f5f5f5f5f5f; QUAD $0x5f5f5f5f5f5f5f5f // .space 16, '________________'
	QUAD $0x5f5f5f5f5f5f5f5f; QUAD $0x5f5f5f5f5f5f5f5f // .space 16, '________________'

LCPI1_6:
	QUAD $0x1010101010101010; QUAD $0x1010101010101010 // .space 16, '\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10'
	QUAD $0x1010101010101010; QUAD $0x1010101010101010 // .space 16, '\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10'

LCPI1_7:
	QUAD $0x2020202020202020; QUAD $0x2020202020202020 // .space 16, '                '
	QUAD $0x2020202020202020; QUAD $0x2020202020202020 // .space 16, '                '

LCPI1_8:
	QUAD $0x0f0f0f0f0f0f0f0f; QUAD $0x0f0f0f0f0f0f0f0f // .space 16, '\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f'
	QUAD $0x0f0f0f0f0f0f0f0f; QUAD $0x0f0f0f0f0f0f0f0f // .space 16, '\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f'

LCPI1_9:
	BYTE $0x01 // .byte 1
	BYTE $0x02 // .byte 2
	BYTE $0x04 // .byte 4
	BYTE $0x08 // .byte 8
	BYTE $0x10 // .byte 16
	BYTE $0x20 // .byte 32
	BYTE $0x40 // .byte 64
	BYTE $0x80 // .byte 128
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x01 // .byte 1
	BYTE $0x02 // .byte 2
	BYTE $0x04 // .byte 4
	BYTE $0x08 // .byte 8
	BYTE $0x10 // .byte 16
	BYTE $0x20 // .byte 32
	BYTE $0x40 // .byte 64
	BYTE $0x80 // .byte 128
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0

LCPI1_10:
	QUAD $0x3f3f3f3f3f3f3f3f; QUAD $0x3f3f3f3f3f3f3f3f // .space 16, '????????????????'
	QUAD $0x3f3f3f3f3f3f3f3f; QUAD $0x3f3f3f3f3f3f3f3f // .space 16, '????????????????'

LCPI1_11:
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1

LCPI1_12:
	WORD $0x1000 // .word 4096
	WORD $0x0001 // .word 1
	WORD $0x1000 // .word 4096
	WORD $0x0001 // .word 1
	WORD $0x1000 // .word 4096
	WORD $0x0001 // .word 1
	WORD $0x1000 // .word 4096
	WORD $0x0001 // .word 1
	WORD $0x1000 // .word 4096
	WORD $0x0001 // .word 1
	WORD $0x1000 // .word 4096
	WORD $0x0001 // .word 1
	WORD $0x1000 // .word 4096
	WORD $0x0001 // .word 1
	WORD $0x1000 // .word 4096
	WORD $0x0001 // .word 1

LCPI1_14:
	BYTE $0x02 // .byte 2
	BYTE $0x01 // .byte 1
	BYTE $0x00 // .byte 0
	BYTE $0x06 // .byte 6
	BYTE $0x05 // .byte 5
	BYTE $0x04 // .byte 4
	BYTE $0x0a // .byte 10
	BYTE $0x09 // .byte 9
	BYTE $0x08 // .byte 8
	BYTE $0x0e // .byte 14
	BYTE $0x0d // .byte 13
	BYTE $0x0c // .byte 12
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x05 // .byte 5
	BYTE $0x04 // .byte 4
	BYTE $0x0a // .byte 10
	BYTE $0x09 // .byte 9
	BYTE $0x08 // .byte 8
	BYTE $0x0e // .byte 14
	BYTE $0x0d // .byte 13
	BYTE $0x0c // .byte 12
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'

LCPI1_13:
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x02 // .byte 2
	BYTE $0x01 // .byte 1
	BYTE $0x00 // .byte 0
	BYTE $0x06 // .byte 6

_b64decode:
	BYTE  $0x55                                 // pushq        %rbp
	WORD  $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	WORD  $0x5741                               // pushq        %r15
	WORD  $0x5641                               // pushq        %r14
	WORD  $0x5541                               // pushq        %r13
	WORD  $0x5441                               // pushq        %r12
	BYTE  $0x53                                 // pushq        %rbx
	SUBQ  $96, SP
	TESTQ DX, DX
	JE    LBB1_8
	MOVQ  0(DI), AX
	MOVQ  8(DI), R14
	ADDQ  AX, R14
	ADDQ  16(DI), AX
	MOVQ  AX, -80(BP)
	LEAQ  0(SI)(DX*1), R9
	TESTB $1, CX
	LONG  $0xb9058d48; WORD $0x000a; BYTE $0x00 // leaq         $2745(%rip), %rax  /* _VecDecodeCharsetStd(%rip) */
	LONG  $0xb21d8d4c; WORD $0x000b; BYTE $0x00 // leaq         $2994(%rip), %r11  /* _VecDecodeCharsetURL(%rip) */
	LONG  $0xd8440f4c                           // cmoveq       %rax, %r11
	TESTB $4, CX
	MOVQ  SI, -72(BP)
	MOVL  CX, -44(BP)
	JE    LBB1_9
	LEAQ  -32(SI)(DX*1), R8
	MOVQ  SI, BX
	MOVQ  R14, AX
	MOVQ  SI, CX
	CMPQ  R8, SI
	JB    LBB1_52
	TESTB $1, -44(BP)
	JE    LBB1_10
	QUAD  $0xfffffdda056ffec5                   // vmovdqu      $-550(%rip), %ymm0  /* LCPI1_1(%rip) */
	MOVQ  -72(BP), AX
	JNE   LBB1_11

LBB1_5:
	QUAD $0xfffffdec0d6ffec5 // vmovdqu      $-532(%rip), %ymm1  /* LCPI1_2(%rip) */
	JNE  LBB1_12

LBB1_6:
	QUAD $0xfffffe22156ffec5 // vmovdqu      $-478(%rip), %ymm2  /* LCPI1_4(%rip) */
	JNE  LBB1_13

LBB1_7:
	QUAD $0xfffffe581d6ffec5 // vmovdqu      $-424(%rip), %ymm3  /* LCPI1_6(%rip) */
	JMP  LBB1_14

LBB1_8:
	XORL AX, AX
	JMP  LBB1_199

LBB1_9:
	MOVQ SI, BX
	MOVQ R14, AX
	MOVQ SI, CX
	JMP  LBB1_52

LBB1_10:
	QUAD $0xfffffd79056ffec5 // vmovdqu      $-647(%rip), %ymm0  /* LCPI1_0(%rip) */
	MOVQ -72(BP), AX
	JE   LBB1_5

LBB1_11:
	QUAD $0xfffffdcb0d6ffec5 // vmovdqu      $-565(%rip), %ymm1  /* LCPI1_3(%rip) */
	JE   LBB1_6

LBB1_12:
	QUAD $0xfffffe01156ffec5 // vmovdqu      $-511(%rip), %ymm2  /* LCPI1_5(%rip) */
	JE   LBB1_7

LBB1_13:
	QUAD $0xfffffe371d6ffec5 // vmovdqu      $-457(%rip), %ymm3  /* LCPI1_7(%rip) */

LBB1_14:
	MOVQ -80(BP), CX
	LEAQ -32(CX), R13
	LEAQ -1(R9), R15
	QUAD $0xfffffe43256ffec5 // vmovdqu      $-445(%rip), %ymm4  /* LCPI1_8(%rip) */
	QUAD $0xfffffe5b2d6ffec5 // vmovdqu      $-421(%rip), %ymm5  /* LCPI1_9(%rip) */
	LONG $0xf6efc9c5         // vpxor        %xmm6, %xmm6, %xmm6
	QUAD $0xfffffe8f056f7ec5 // vmovdqu      $-369(%rip), %ymm8  /* LCPI1_11(%rip) */
	QUAD $0xfffffea70d6f7ec5 // vmovdqu      $-345(%rip), %ymm9  /* LCPI1_12(%rip) */
	QUAD $0xfffffedf156f7ac5 // vmovdqu      $-289(%rip), %xmm10  /* LCPI1_13(%rip) */
	QUAD $0xfffffeb71d6f7ec5 // vmovdqu      $-329(%rip), %ymm11  /* LCPI1_14(%rip) */
	MOVQ $-4294967296, R12
	MOVQ AX, BX
	MOVQ AX, CX
	MOVQ R14, AX
	JMP  LBB1_18

LBB1_15:
	LONG $0x207f7ac5               // vmovdqu      %xmm12, (%rax)
	LONG $0x397d63c4; WORD $0x01e7 // vextracti128 $1, %ymm12, %xmm7
	LONG $0x78d6f9c5; BYTE $0x10   // vmovq        %xmm7, $16(%rax)

LBB1_16:
	ADDQ $32, BX
	ADDQ $24, AX
	MOVQ BX, CX
	MOVQ CX, BX
	CMPQ R8, CX
	JB   LBB1_51

LBB1_18:
	LONG $0x216f7ec5               // vmovdqu      (%rcx), %ymm12
	LONG $0x7215c1c4; WORD $0x04d4 // vpsrld       $4, %ymm12, %ymm13
	LONG $0xecdb15c5               // vpand        %ymm4, %ymm13, %ymm13
	LONG $0xf4db1dc5               // vpand        %ymm4, %ymm12, %ymm14
	LONG $0x007542c4; BYTE $0xf6   // vpshufb      %ymm14, %ymm1, %ymm14
	LONG $0x005542c4; BYTE $0xfd   // vpshufb      %ymm13, %ymm5, %ymm15
	LONG $0xdb0541c4; BYTE $0xf6   // vpand        %ymm14, %ymm15, %ymm14
	LONG $0xf6740dc5               // vpcmpeqb     %ymm6, %ymm14, %ymm14
	MOVQ CX, SI
	LONG $0xd77dc1c4; BYTE $0xce   // vpmovmskb    %ymm14, %ecx
	ORQ  R12, CX
	LONG $0xbc0f48f3; BYTE $0xc9   // tzcntq       %rcx, %rcx
	CMPL CX, $31
	JA   LBB1_32
	MOVQ AX, R10
	XORL CX, CX
	CMPQ R9, BX
	JBE  LBB1_34
	XORL DX, DX

LBB1_21:
	MOVBLZX 0(BX), AX
	CMPQ    AX, $10
	JE      LBB1_25
	CMPB    AX, $13
	JE      LBB1_25
	MOVBLZX 0(R11)(AX*1), AX
	CMPL    AX, $255
	JE      LBB1_27
	INCL    CX
	SHLL    $6, DX
	ORL     AX, DX

LBB1_25:
	INCQ BX
	CMPQ BX, R9
	JAE  LBB1_27
	CMPL CX, $4
	JL   LBB1_21

LBB1_27:
	CMPL CX, $1
	JE   LBB1_49
	CMPL CX, $3
	JG   LBB1_41
	CMPQ BX, R9
	JE   LBB1_39
	CMPL CX, $3
	JNE  LBB1_35
	CMPB 0(BX), $61
	LEAQ 1(BX), BX
	MOVL $3, CX
	JE   LBB1_38
	JMP  LBB1_49

LBB1_32:
	LONG $0x007d42c4; BYTE $0xed   // vpshufb      %ymm13, %ymm0, %ymm13
	LONG $0xf2741dc5               // vpcmpeqb     %ymm2, %ymm12, %ymm14
	LONG $0x4c1563c4; WORD $0xe0eb // vpblendvb    %ymm14, %ymm3, %ymm13, %ymm13
	LONG $0xfc1541c4; BYTE $0xe4   // vpaddb       %ymm12, %ymm13, %ymm12
	QUAD $0xfffffd5625db1dc5       // vpand        $-682(%rip), %ymm12, %ymm12  /* LCPI1_10(%rip) */
	LONG $0x041d42c4; BYTE $0xe0   // vpmaddubsw   %ymm8, %ymm12, %ymm12
	LONG $0xf51d41c4; BYTE $0xe1   // vpmaddwd     %ymm9, %ymm12, %ymm12
	LONG $0x397d63c4; WORD $0x01e7 // vextracti128 $1, %ymm12, %xmm7
	LONG $0x0041c2c4; BYTE $0xfa   // vpshufb      %xmm10, %xmm7, %xmm7
	LONG $0x001d42c4; BYTE $0xe3   // vpshufb      %ymm11, %ymm12, %ymm12
	LONG $0x021de3c4; WORD $0x08ff // vpblendd     $8, %ymm7, %ymm12, %ymm7
	LONG $0x024563c4; WORD $0xc0e6 // vpblendd     $192, %ymm6, %ymm7, %ymm12
	CMPQ R13, AX
	JB   LBB1_15
	LONG $0x207f7ec5               // vmovdqu      %ymm12, (%rax)
	JMP  LBB1_16

LBB1_34:
	MOVL $0, DX
	CMPQ R9, BX
	JE   LBB1_39

LBB1_35:
	CMPQ BX, R15
	JAE  LBB1_49
	CMPB 0(BX), $61
	JNE  LBB1_48
	CMPB 1(BX), $61
	LEAQ 2(BX), BX
	JNE  LBB1_49

LBB1_38:
	CMPQ BX, R9
	JAE  LBB1_40
	JMP  LBB1_49

LBB1_39:
	MOVQ  R9, BX
	TESTB $2, -44(BP)
	JE    LBB1_49

LBB1_40:
	MOVB    $4, AX
	SUBB    CX, AX
	MOVBLZX AX, AX
	ADDL    AX, AX
	LEAL    0(AX)(AX*2), AX
	LONG    $0xf779e2c4; BYTE $0xd2 // shlxl        %eax, %edx, %edx

LBB1_41:
	CMPL CX, $2
	JE   LBB1_46
	CMPL CX, $3
	JE   LBB1_45
	CMPL CX, $4
	MOVQ R10, SI
	JNE  LBB1_47
	MOVB DX, 2(SI)

LBB1_45:
	MOVQ R10, AX
	MOVB DH, 1(AX)

LBB1_46:
	SHRL $16, DX
	MOVQ R10, SI
	MOVB DX, 0(R10)

LBB1_47:
	MOVLQSX CX, AX
	LEAQ    -1(SI)(AX*1), AX
	MOVQ    BX, CX
	MOVQ    CX, BX
	CMPQ    R8, CX
	JAE     LBB1_18
	JMP     LBB1_51

LBB1_48:
	INCQ BX

LBB1_49:
	MOVQ SI, CX
	SUBQ SI, BX
	JNE  LBB1_183
	MOVQ R10, AX
	MOVQ CX, BX
	CMPQ R8, CX
	JAE  LBB1_18

LBB1_51:
	MOVQ CX, BX

LBB1_52:
	MOVQ CX, R13
	MOVQ -80(BP), CX
	ADDQ $-8, CX
	MOVQ CX, -128(BP)
	CMPQ CX, AX
	MOVQ R11, -56(BP)
	MOVQ DI, -88(BP)
	MOVQ R14, -96(BP)
	JB   LBB1_91
	LEAQ -8(R9), CX
	MOVQ CX, -120(BP)
	CMPQ CX, BX
	JB   LBB1_91
	LEAQ -1(R9), CX
	MOVQ CX, -112(BP)
	MOVQ R9, -104(BP)

LBB1_55:
	MOVQ    R13, -136(BP)
	MOVQ    AX, -64(BP)
	MOVBQSX 0(BX), AX
	MOVBLZX 0(R11)(AX*1), R12
	MOVBQSX 1(BX), CX
	MOVBLZX 0(R11)(CX*1), R13
	MOVBQSX 2(BX), CX
	MOVQ    R11, DI
	MOVBLZX 0(R11)(CX*1), R11
	MOVBQSX 3(BX), CX
	MOVBLZX 0(DI)(CX*1), CX
	MOVBQSX 4(BX), DX
	MOVBLZX 0(DI)(DX*1), R8
	MOVBQSX 5(BX), DX
	MOVBLZX 0(DI)(DX*1), R9
	MOVBQSX 6(BX), DX
	MOVBLZX 0(DI)(DX*1), DX
	MOVL    R13, SI
	ORL     R12, SI
	MOVL    CX, R14
	ORL     R11, R14
	ORL     SI, R14
	MOVL    R9, SI
	ORL     R8, SI
	MOVL    DX, R10
	ORL     SI, R10
	MOVBQSX 7(BX), SI
	MOVBLZX 0(DI)(SI*1), R15
	ORL     R14, R10
	MOVL    R15, SI
	ORL     R10, SI
	CMPB    SI, $-1
	JE      LBB1_57
	SHLQ    $58, R12
	SHLQ    $52, R13
	ORQ     R12, R13
	SHLQ    $46, R11
	SHLQ    $40, CX
	ORQ     R11, CX
	ORQ     R13, CX
	SHLQ    $34, R8
	SHLQ    $28, R9
	ORQ     R8, R9
	SHLQ    $22, DX
	ORQ     R9, DX
	ORQ     CX, DX
	SHLQ    $16, R15
	ORQ     DX, R15
	BSWAPQ  R15
	MOVQ    -64(BP), AX
	MOVQ    R15, 0(AX)
	ADDQ    $8, BX
	ADDQ    $6, AX
	MOVQ    BX, R13
	MOVQ    -56(BP), R11
	MOVQ    -104(BP), R9
	JMP     LBB1_88

LBB1_57:
	MOVQ -104(BP), R9
	CMPQ R9, BX
	JBE  LBB1_65
	INCQ BX
	XORL DX, DX
	XORL CX, CX
	MOVQ -56(BP), R11
	CMPB AX, $10
	JE   LBB1_62

LBB1_59:
	CMPB    AX, $13
	JE      LBB1_62
	MOVBLZX AX, AX
	MOVBLZX 0(R11)(AX*1), AX
	CMPL    AX, $255
	JE      LBB1_69
	INCL    DX
	SHLL    $6, CX
	ORL     AX, CX

LBB1_62:
	CMPQ    BX, R9
	JAE     LBB1_70
	CMPL    DX, $3
	JG      LBB1_70
	MOVBLZX 0(BX), AX
	INCQ    BX
	CMPB    AX, $10
	JNE     LBB1_59
	JMP     LBB1_62

LBB1_65:
	XORL DX, DX
	MOVL $0, CX
	CMPQ R9, BX
	MOVQ -56(BP), R11
	JE   LBB1_76

LBB1_66:
	CMPQ BX, -112(BP)
	JAE  LBB1_86
	CMPB 0(BX), $61
	JNE  LBB1_85
	CMPB 1(BX), $61
	LEAQ 2(BX), BX
	JE   LBB1_75
	JMP  LBB1_86

LBB1_69:
	DECQ BX

LBB1_70:
	CMPL DX, $1
	JE   LBB1_86
	CMPL DX, $3
	JG   LBB1_78
	CMPQ BX, R9
	JE   LBB1_76
	CMPL DX, $3
	JNE  LBB1_66
	CMPB 0(BX), $61
	LEAQ 1(BX), BX
	MOVL $3, DX
	JNE  LBB1_86

LBB1_75:
	CMPQ BX, R9
	JAE  LBB1_77
	JMP  LBB1_86

LBB1_76:
	MOVQ  R9, BX
	TESTB $2, -44(BP)
	JE    LBB1_86

LBB1_77:
	MOVB    $4, AX
	SUBB    DX, AX
	MOVBLZX AX, AX
	ADDL    AX, AX
	LEAL    0(AX)(AX*2), AX
	LONG    $0xf779e2c4; BYTE $0xc9 // shlxl        %eax, %ecx, %ecx

LBB1_78:
	CMPL DX, $2
	JE   LBB1_83
	CMPL DX, $3
	JE   LBB1_82
	CMPL DX, $4
	MOVQ -64(BP), SI
	JNE  LBB1_84
	MOVB CX, 2(SI)

LBB1_82:
	MOVQ -64(BP), AX
	MOVB CH, 1(AX)

LBB1_83:
	SHRL $16, CX
	MOVQ -64(BP), SI
	MOVB CX, 0(SI)

LBB1_84:
	MOVLQSX DX, AX
	LEAQ    -1(SI)(AX*1), AX
	MOVQ    BX, R13
	JMP     LBB1_88

LBB1_85:
	INCQ BX

LBB1_86:
	MOVQ -136(BP), R13
	SUBQ R13, BX
	JNE  LBB1_184
	MOVQ -64(BP), AX

LBB1_88:
	CMPQ -128(BP), AX
	JB   LBB1_90
	MOVQ R13, BX
	CMPQ -120(BP), R13
	JAE  LBB1_55

LBB1_90:
	MOVQ R13, BX
	MOVQ -96(BP), R14

LBB1_91:
	MOVQ  R13, SI
	NEGQ  R13
	MOVQ  -80(BP), CX
	ADDQ  $-4, CX
	MOVQ  CX, -80(BP)
	CMPQ  CX, AX
	JB    LBB1_132
	LEAQ  -4(R9), R15
	CMPQ  R15, BX
	JB    LBB1_132
	LEAQ  -1(R9), CX
	MOVQ  CX, -64(BP)
	TESTB $2, -44(BP)
	JNE   LBB1_133
	MOVQ  BX, DX
	MOVQ  SI, CX

LBB1_95:
	MOVQ    CX, DI
	MOVQ    AX, R12
	MOVBQSX 0(DX), SI
	MOVQ    R11, BX
	MOVBLZX 0(R11)(SI*1), R11
	MOVBQSX 1(DX), AX
	MOVBLZX 0(BX)(AX*1), R10
	MOVBQSX 2(DX), CX
	MOVBLZX 0(BX)(CX*1), R8
	MOVBQSX 3(DX), CX
	MOVBLZX 0(BX)(CX*1), CX
	MOVL    R10, AX
	ORL     R11, AX
	MOVL    R8, BX
	ORL     CX, BX
	ORL     AX, BX
	CMPB    BX, $-1
	JE      LBB1_97
	SHLL    $26, R11
	SHLL    $20, R10
	ORL     R11, R10
	SHLL    $14, R8
	SHLL    $8, CX
	ORL     R8, CX
	ORL     R10, CX
	BSWAPL  CX
	MOVQ    R12, AX
	MOVL    CX, 0(R12)
	ADDQ    $4, DX
	ADDQ    $3, AX
	MOVQ    DX, CX
	MOVQ    -56(BP), R11
	MOVQ    CX, R13
	NEGQ    R13
	CMPQ    -80(BP), AX
	JAE     LBB1_123
	JMP     LBB1_168

LBB1_97:
	CMPQ R9, DX
	JBE  LBB1_105
	INCQ DX
	XORL CX, CX
	XORL AX, AX
	MOVQ -56(BP), R11
	CMPB SI, $10
	JE   LBB1_102

LBB1_99:
	CMPB    SI, $13
	JE      LBB1_102
	MOVBLZX SI, SI
	MOVBLZX 0(R11)(SI*1), SI
	CMPL    SI, $255
	JE      LBB1_110
	INCL    CX
	SHLL    $6, AX
	ORL     SI, AX

LBB1_102:
	CMPQ    DX, R9
	JAE     LBB1_111
	CMPL    CX, $3
	JG      LBB1_111
	MOVBLZX 0(DX), SI
	INCQ    DX
	CMPB    SI, $10
	JNE     LBB1_99
	JMP     LBB1_102

LBB1_105:
	XORL AX, AX
	MOVL $0, CX
	MOVQ R9, BX
	CMPQ R9, DX
	MOVQ -56(BP), R11
	JE   LBB1_121

LBB1_106:
	CMPQ DX, -64(BP)
	JAE  LBB1_120
	CMPB 0(DX), $61
	JNE  LBB1_119
	LEAQ 2(DX), BX
	CMPB 1(DX), $61
	MOVQ BX, DX
	JE   LBB1_117
	JMP  LBB1_121

LBB1_110:
	DECQ DX

LBB1_111:
	CMPL CX, $1
	JE   LBB1_120
	CMPL CX, $3
	JG   LBB1_125
	MOVQ R9, BX
	CMPQ DX, R9
	JE   LBB1_121
	CMPL CX, $3
	JNE  LBB1_106
	LEAQ 1(DX), BX
	MOVL $3, CX
	CMPB 0(DX), $61
	MOVQ BX, DX
	JNE  LBB1_121

LBB1_117:
	CMPQ    DX, R9
	JB      LBB1_120
	MOVB    $4, BX
	SUBB    CX, BX
	MOVBLZX BX, SI
	ADDL    SI, SI
	LEAL    0(SI)(SI*2), SI
	LONG    $0xf749e2c4; BYTE $0xc0 // shlxl        %esi, %eax, %eax

LBB1_125:
	CMPL CX, $2
	JE   LBB1_130
	CMPL CX, $3
	JE   LBB1_129
	CMPL CX, $4
	MOVQ R12, SI
	JNE  LBB1_131
	MOVB AX, 2(SI)

LBB1_129:
	MOVQ R12, SI
	MOVB AH, 1(SI)

LBB1_130:
	SHRL $16, AX
	MOVQ R12, SI
	MOVB AX, 0(R12)

LBB1_131:
	MOVLQSX CX, AX
	LEAQ    -1(SI)(AX*1), AX
	MOVQ    DX, CX
	MOVQ    CX, R13
	NEGQ    R13
	CMPQ    -80(BP), AX
	JAE     LBB1_123
	JMP     LBB1_168

LBB1_119:
	INCQ DX

LBB1_120:
	MOVQ DX, BX

LBB1_121:
	MOVQ DI, CX
	SUBQ DI, BX
	MOVQ R12, AX
	JNE  LBB1_178
	MOVQ CX, R13
	NEGQ R13
	CMPQ -80(BP), AX
	JB   LBB1_168

LBB1_123:
	MOVQ CX, DX
	CMPQ R15, CX
	JAE  LBB1_95

LBB1_168:
	MOVQ CX, BX
	MOVQ -96(BP), R14
	MOVQ -88(BP), DI
	CMPQ R9, BX
	JBE  LBB1_198
	JMP  LBB1_169

LBB1_132:
	MOVQ -88(BP), DI
	MOVQ SI, CX
	CMPQ R9, BX
	JBE  LBB1_198

LBB1_169:
	MOVQ CX, R8
	MOVQ AX, SI
	XORL AX, AX
	XORL CX, CX

LBB1_170:
	MOVBLZX 0(BX), DX
	CMPQ    DX, $10
	JE      LBB1_174
	CMPB    DX, $13
	JE      LBB1_174
	MOVBLZX 0(R11)(DX*1), DX
	CMPL    DX, $255
	JE      LBB1_176
	INCL    AX
	SHLL    $6, CX
	ORL     DX, CX

LBB1_174:
	INCQ BX
	CMPQ BX, R9
	JAE  LBB1_176
	CMPL AX, $4
	JL   LBB1_170

LBB1_176:
	CMPL AX, $1
	JNE  LBB1_179

LBB1_177:
	SUBQ R8, BX
	MOVQ SI, AX
	JE   LBB1_198

LBB1_178:
	ADDQ -72(BP), R13
	SUBQ BX, R13
	MOVQ R13, AX
	JMP  LBB1_199

LBB1_133:
	MOVQ SI, CX

LBB1_134:
	MOVQ    CX, R14
	MOVQ    AX, R12
	MOVBQSX 0(BX), AX
	MOVBLZX 0(R11)(AX*1), R10
	MOVBQSX 1(BX), CX
	MOVQ    R11, SI
	MOVBLZX 0(R11)(CX*1), R11
	MOVBQSX 2(BX), DX
	MOVBLZX 0(SI)(DX*1), R8
	MOVBQSX 3(BX), DX
	MOVBLZX 0(SI)(DX*1), DX
	MOVL    R11, CX
	ORL     R10, CX
	MOVL    R8, SI
	ORL     DX, SI
	ORL     CX, SI
	CMPB    SI, $-1
	JE      LBB1_136
	SHLL    $26, R10
	SHLL    $20, R11
	ORL     R10, R11
	SHLL    $14, R8
	SHLL    $8, DX
	ORL     R8, DX
	ORL     R11, DX
	BSWAPL  DX
	MOVQ    R12, AX
	MOVL    DX, 0(R12)
	ADDQ    $4, BX
	ADDQ    $3, AX
	MOVQ    BX, CX
	MOVQ    -56(BP), R11
	MOVQ    CX, R13
	NEGQ    R13
	CMPQ    -80(BP), AX
	JAE     LBB1_158
	JMP     LBB1_168

LBB1_136:
	CMPQ R9, BX
	JBE  LBB1_144
	INCQ BX
	XORL CX, CX
	XORL DX, DX
	MOVQ -56(BP), R11
	CMPB AX, $10
	JE   LBB1_141

LBB1_138:
	CMPB    AX, $13
	JE      LBB1_141
	MOVBLZX AX, AX
	MOVBLZX 0(R11)(AX*1), AX
	CMPL    AX, $255
	JE      LBB1_148
	INCL    CX
	SHLL    $6, DX
	ORL     AX, DX

LBB1_141:
	CMPQ    BX, R9
	JAE     LBB1_149
	CMPL    CX, $3
	JG      LBB1_149
	MOVBLZX 0(BX), AX
	INCQ    BX
	CMPB    AX, $10
	JNE     LBB1_138
	JMP     LBB1_141

LBB1_144:
	XORL DX, DX
	MOVL $0, CX
	MOVQ R9, AX
	CMPQ R9, BX
	MOVQ -56(BP), R11
	JE   LBB1_160

LBB1_145:
	CMPQ BX, -64(BP)
	JAE  LBB1_156
	CMPB 0(BX), $61
	JNE  LBB1_155
	LEAQ 2(BX), AX
	CMPB 1(BX), $61
	MOVQ AX, BX
	JE   LBB1_154
	JMP  LBB1_156

LBB1_148:
	DECQ BX

LBB1_149:
	CMPL CX, $1
	JE   LBB1_156
	CMPL CX, $3
	JG   LBB1_161
	CMPQ BX, R9
	JE   LBB1_159
	CMPL CX, $3
	JNE  LBB1_145
	LEAQ 1(BX), AX
	MOVL $3, CX
	CMPB 0(BX), $61
	MOVQ AX, BX
	JNE  LBB1_156

LBB1_154:
	MOVQ AX, BX
	CMPQ AX, R9
	JB   LBB1_156
	JMP  LBB1_160

LBB1_155:
	INCQ BX

LBB1_156:
	MOVQ R14, CX
	SUBQ R14, BX
	MOVQ R12, AX
	JNE  LBB1_178
	MOVQ CX, R13
	NEGQ R13
	CMPQ -80(BP), AX
	JB   LBB1_168

LBB1_158:
	MOVQ CX, BX
	CMPQ R15, CX
	JAE  LBB1_134
	JMP  LBB1_168

LBB1_159:
	MOVQ R9, AX

LBB1_160:
	MOVB    $4, BX
	SUBB    CX, BX
	MOVBLZX BX, SI
	ADDL    SI, SI
	LEAL    0(SI)(SI*2), SI
	LONG    $0xf749e2c4; BYTE $0xd2 // shlxl        %esi, %edx, %edx
	MOVQ    AX, BX

LBB1_161:
	CMPL CX, $2
	JE   LBB1_166
	CMPL CX, $3
	JE   LBB1_165
	CMPL CX, $4
	MOVQ R12, SI
	JNE  LBB1_167
	MOVB DX, 2(SI)

LBB1_165:
	MOVQ R12, AX
	MOVB DH, 1(AX)

LBB1_166:
	SHRL $16, DX
	MOVQ R12, SI
	MOVB DX, 0(R12)

LBB1_167:
	MOVLQSX CX, AX
	LEAQ    -1(SI)(AX*1), AX
	MOVQ    BX, CX
	MOVQ    CX, R13
	NEGQ    R13
	CMPQ    -80(BP), AX
	JAE     LBB1_158
	JMP     LBB1_168

LBB1_179:
	CMPL AX, $3
	JG   LBB1_191
	CMPQ BX, R9
	JE   LBB1_185
	CMPL AX, $3
	JNE  LBB1_186
	CMPB 0(BX), $61
	LEAQ 1(BX), BX
	JNE  LBB1_177
	JMP  LBB1_189

LBB1_183:
	MOVQ -72(BP), AX
	SUBQ CX, AX
	SUBQ BX, AX
	JMP  LBB1_199

LBB1_184:
	MOVQ -72(BP), AX
	SUBQ R13, AX
	SUBQ BX, AX
	JMP  LBB1_199

LBB1_185:
	MOVQ  R9, BX
	TESTB $2, -44(BP)
	JE    LBB1_177
	JMP   LBB1_190

LBB1_186:
	LEAQ -1(R9), DX
	CMPQ BX, DX
	JAE  LBB1_177
	CMPB 0(BX), $61
	JNE  LBB1_200
	CMPB 1(BX), $61
	LEAQ 2(BX), BX
	JNE  LBB1_177

LBB1_189:
	CMPQ BX, R9
	JB   LBB1_177

LBB1_190:
	MOVB    $4, DX
	SUBB    AX, DX
	MOVBLZX DX, DX
	ADDL    DX, DX
	LEAL    0(DX)(DX*2), DX
	LONG    $0xf769e2c4; BYTE $0xc9 // shlxl        %edx, %ecx, %ecx

LBB1_191:
	CMPL AX, $2
	JE   LBB1_196
	CMPL AX, $3
	JE   LBB1_195
	CMPL AX, $4
	MOVQ SI, DX
	JNE  LBB1_197
	MOVB CX, 2(DX)

LBB1_195:
	MOVQ SI, DX
	MOVB CH, 1(SI)

LBB1_196:
	SHRL $16, CX
	MOVQ SI, DX
	MOVB CX, 0(SI)

LBB1_197:
	WORD $0x9848          // cltq
	LEAQ -1(DX)(AX*1), AX

LBB1_198:
	SUBQ R14, AX
	ADDQ AX, 8(DI)

LBB1_199:
	ADDQ $96, SP
	BYTE $0x5b               // popq         %rbx
	WORD $0x5c41             // popq         %r12
	WORD $0x5d41             // popq         %r13
	WORD $0x5e41             // popq         %r14
	WORD $0x5f41             // popq         %r15
	BYTE $0x5d               // popq         %rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	RET

LBB1_200:
	INCQ BX
	JMP  LBB1_177

_TabEncodeCharsetStd:
	QUAD $0x4847464544434241; QUAD $0x504f4e4d4c4b4a49 // .ascii 16, 'ABCDEFGHIJKLMNOP'
	QUAD $0x5857565554535251; QUAD $0x6665646362615a59 // .ascii 16, 'QRSTUVWXYZabcdef'
	QUAD $0x6e6d6c6b6a696867; QUAD $0x767574737271706f // .ascii 16, 'ghijklmnopqrstuv'
	QUAD $0x333231307a797877; QUAD $0x2f2b393837363534 // .ascii 16, 'wxyz0123456789+/'

_VecEncodeCharsetStd:
	QUAD $0xfcfcfcfcfcfcfc47; QUAD $0x000041f0edfcfcfc // .asciz 16, 'G\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xed\xf0A\x00\x00'
	QUAD $0xfcfcfcfcfcfcfc47; QUAD $0x000041f0edfcfcfc // .asciz 16, 'G\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xed\xf0A\x00\x00'

_TabEncodeCharsetURL:
	QUAD $0x4847464544434241; QUAD $0x504f4e4d4c4b4a49 // .ascii 16, 'ABCDEFGHIJKLMNOP'
	QUAD $0x5857565554535251; QUAD $0x6665646362615a59 // .ascii 16, 'QRSTUVWXYZabcdef'
	QUAD $0x6e6d6c6b6a696867; QUAD $0x767574737271706f // .ascii 16, 'ghijklmnopqrstuv'
	QUAD $0x333231307a797877; QUAD $0x5f2d393837363534 // .ascii 16, 'wxyz0123456789-_'

_VecEncodeCharsetURL:
	QUAD $0xfcfcfcfcfcfcfc47; QUAD $0x00004120effcfcfc // .asciz 16, 'G\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xef A\x00\x00'
	QUAD $0xfcfcfcfcfcfcfc47; QUAD $0x00004120effcfcfc // .asciz 16, 'G\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xef A\x00\x00'

_VecDecodeCharsetStd:
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0x3fffffff3effffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff>\xff\xff\xff?'
	QUAD $0x3b3a393837363534; QUAD $0xffffffffffff3d3c // .ascii 16, '456789:;<=\xff\xff\xff\xff\xff\xff'
	QUAD $0x06050403020100ff; QUAD $0x0e0d0c0b0a090807 // .ascii 16, '\xff\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e'
	QUAD $0x161514131211100f; QUAD $0xffffffffff191817 // .ascii 16, '\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\xff\xff\xff\xff\xff'
	QUAD $0x201f1e1d1c1b1aff; QUAD $0x2827262524232221 // .ascii 16, '\xff\x1a\x1b\x1c\x1d\x1e\x1f !"#$%&\'('
	QUAD $0x302f2e2d2c2b2a29; QUAD $0xffffffffff333231 // .ascii 16, ')*+,-./0123\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'

_VecDecodeCharsetURL:
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffff3effffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff>\xff\xff'
	QUAD $0x3b3a393837363534; QUAD $0xffffffffffff3d3c // .ascii 16, '456789:;<=\xff\xff\xff\xff\xff\xff'
	QUAD $0x06050403020100ff; QUAD $0x0e0d0c0b0a090807 // .ascii 16, '\xff\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e'
	QUAD $0x161514131211100f; QUAD $0x3fffffffff191817 // .ascii 16, '\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\xff\xff\xff\xff?'
	QUAD $0x201f1e1d1c1b1aff; QUAD $0x2827262524232221 // .ascii 16, '\xff\x1a\x1b\x1c\x1d\x1e\x1f !"#$%&\'('
	QUAD $0x302f2e2d2c2b2a29; QUAD $0xffffffffff333231 // .ascii 16, ')*+,-./0123\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'

TEXT Â·__b64decode(SB), NOSPLIT, $0 - 40
	MOVQ out+0(FP), DI
	MOVQ src+8(FP), SI
	MOVQ len+16(FP), DX
	MOVQ mode+24(FP), CX
	CALL Â·___asm2asm_compiled_code__DO_NOT_CALL_THIS_SYMBOL___+1489(SB) // _b64decode
	MOVQ AX, ret+32(FP)
	RET

TEXT Â·__b64encode(SB), NOSPLIT, $0 - 24
	MOVQ out+0(FP), DI
	MOVQ src+8(FP), SI
	MOVQ mode+16(FP), DX
	LEAQ Â·___asm2asm_compiled_code__DO_NOT_CALL_THIS_SYMBOL___+224(SB), AX // _b64encode
	JMP  AX
